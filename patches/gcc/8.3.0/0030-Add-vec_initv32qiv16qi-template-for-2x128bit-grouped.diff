From a3f09079828a98133dfd292752846ef4ad9f91a8 Mon Sep 17 00:00:00 2001
From: Chenghui Pan <panchenghui@loongson.cn>
Date: Wed, 7 Jun 2023 17:06:05 +0800
Subject: [PATCH 01/13] Add vec_initv32qiv16qi template for 2x128bit-grouped
 vector init operation.

Change-Id: Ib7bd8691a59d7608f9eee2556b9ad268c7544107
---
 src/gcc/config/loongarch/lasx.md              |  9 ++++++++
 src/gcc/config/loongarch/loongarch-protos.h   |  1 +
 src/gcc/config/loongarch/loongarch.c          |  9 ++++++++
 .../gcc.target/loongarch/vec_initv32qiv16qi.c | 23 +++++++++++++++++++
 4 files changed, 42 insertions(+)
 create mode 100644 src/gcc/testsuite/gcc.target/loongarch/vec_initv32qiv16qi.c

diff --git a/src/gcc/config/loongarch/lasx.md b/src/gcc/config/loongarch/lasx.md
index 515336e05..01a21bd6c 100644
--- a/src/gcc/config/loongarch/lasx.md
+++ b/src/gcc/config/loongarch/lasx.md
@@ -519,6 +519,15 @@
   DONE;
 })
 
+(define_expand "vec_initv32qiv16qi"
+ [(match_operand:V32QI 0 "register_operand")
+  (match_operand:V16QI 1 "")]
+  "ISA_HAS_LASX"
+{
+  loongarch_expand_vector_group_init (operands[0], operands[1]);
+  DONE;
+})
+
 ;; FIXME: Delete.
 (define_insn "vec_pack_trunc_<mode>"
    [(set (match_operand:<VHSMODE256> 0 "register_operand" "=f")
diff --git a/src/gcc/config/loongarch/loongarch-protos.h b/src/gcc/config/loongarch/loongarch-protos.h
index 498d80514..08a9e8dc2 100644
--- a/src/gcc/config/loongarch/loongarch-protos.h
+++ b/src/gcc/config/loongarch/loongarch-protos.h
@@ -163,6 +163,7 @@ union loongarch_gen_fn_ptrs
 extern void loongarch_expand_atomic_qihi (union loongarch_gen_fn_ptrs,
 					  rtx, rtx, rtx, rtx, rtx);
 
+extern void loongarch_expand_vector_group_init (rtx, rtx);
 extern void loongarch_expand_vector_init (rtx, rtx);
 extern void loongarch_expand_vec_unpack (rtx op[2], bool, bool);
 extern void loongarch_expand_vec_perm (rtx, rtx, rtx, rtx);
diff --git a/src/gcc/config/loongarch/loongarch.c b/src/gcc/config/loongarch/loongarch.c
index a1dde5a0f..fe55c4dd9 100644
--- a/src/gcc/config/loongarch/loongarch.c
+++ b/src/gcc/config/loongarch/loongarch.c
@@ -9693,6 +9693,15 @@ loongarch_gen_const_int_vector_shuffle (machine_mode mode, int val)
 
 /* Expand a vector initialization.  */
 
+void
+loongarch_expand_vector_group_init (rtx target, rtx vals)
+{
+  machine_mode mode = GET_MODE (target);
+  rtx ops[2] = { XVECEXP (vals, 0, 0), XVECEXP (vals, 0, 1) };
+  emit_insn (gen_rtx_SET (target, gen_rtx_VEC_CONCAT (E_V32QImode, ops[0],
+            ops[1])));
+}
+
 void
 loongarch_expand_vector_init (rtx target, rtx vals)
 {
diff --git a/src/gcc/testsuite/gcc.target/loongarch/vec_initv32qiv16qi.c b/src/gcc/testsuite/gcc.target/loongarch/vec_initv32qiv16qi.c
new file mode 100644
index 000000000..84e57645a
--- /dev/null
+++ b/src/gcc/testsuite/gcc.target/loongarch/vec_initv32qiv16qi.c
@@ -0,0 +1,23 @@
+/* { dg-do compile } */
+/* { dg-options "-mlasx -O3 -ftree-vectorize -fdump-tree-vect-details" } */
+
+typedef unsigned char uint8_t;
+
+int
+test_func (uint8_t *pix1, int i_stride_pix1,
+	   uint8_t *pix2, int i_stride_pix2)
+{
+    int i_sum = 0;
+    for (int y = 0; y < 16; y++)
+      {
+        for (int x = 0; x < 16; x++)
+	  {
+            i_sum += __builtin_abs (pix1[x] - pix2[x]);
+	  }
+        pix1 += i_stride_pix1;
+        pix2 += i_stride_pix2;
+      }
+    return i_sum;
+}
+
+/* { dg-final { scan-tree-dump "vect_cst__438 = {_442, _440}" "vect" } } */
-- 
2.31.1

