From 459541e7e8ffc2c38f4a16a4b0154eced392e56d Mon Sep 17 00:00:00 2001
From: Jiahao Xu <xujiahao@loongson.cn>
Date: Sat, 8 Oct 2022 15:45:17 +0800
Subject: [PATCH 05/28] Add prefetch insn

Change-Id: Iaa366e40743d40e19dbf38d6bc5f869c735e20cb
---
 src/gcc/config/loongarch/loongarch-def.c    |  2 +
 src/gcc/config/loongarch/loongarch-protos.h |  1 +
 src/gcc/config/loongarch/loongarch-tune.h   |  1 +
 src/gcc/config/loongarch/loongarch.c        | 45 +++++++++++++++++++++
 src/gcc/config/loongarch/loongarch.md       | 23 +++++++++++
 5 files changed, 72 insertions(+)

diff --git a/src/gcc/config/loongarch/loongarch-def.c b/src/gcc/config/loongarch/loongarch-def.c
index 555570845..8e865303f 100644
--- a/src/gcc/config/loongarch/loongarch-def.c
+++ b/src/gcc/config/loongarch/loongarch-def.c
@@ -64,11 +64,13 @@ loongarch_cpu_cache[N_TUNE_TYPES] = {
       .l1d_line_size = 64,
       .l1d_size = 64,
       .l2d_size = 256,
+      .simultaneous_prefetches = 4,
   },
   [CPU_LA464] = {
       .l1d_line_size = 64,
       .l1d_size = 64,
       .l2d_size = 256,
+      .simultaneous_prefetches = 4,
   },
 };
 
diff --git a/src/gcc/config/loongarch/loongarch-protos.h b/src/gcc/config/loongarch/loongarch-protos.h
index 3dfcf2e0d..aaa679fc8 100644
--- a/src/gcc/config/loongarch/loongarch-protos.h
+++ b/src/gcc/config/loongarch/loongarch-protos.h
@@ -206,4 +206,5 @@ extern rtx loongarch_gen_const_int_vector_shuffle (machine_mode, int);
 extern tree loongarch_build_builtin_va_list (void);
 extern rtx loongarch_build_signbit_mask (machine_mode, bool, bool);
 extern void loongarch_emit_swrsqrtsf (rtx, rtx, machine_mode);
+extern rtx loongarch_prefetch_cookie (rtx, rtx);
 #endif /* ! GCC_LARCH_PROTOS_H */
diff --git a/src/gcc/config/loongarch/loongarch-tune.h b/src/gcc/config/loongarch/loongarch-tune.h
index b1bf6e2e3..bb01f2d98 100644
--- a/src/gcc/config/loongarch/loongarch-tune.h
+++ b/src/gcc/config/loongarch/loongarch-tune.h
@@ -45,6 +45,7 @@ struct loongarch_cache {
     int l1d_line_size;  /* bytes */
     int l1d_size;       /* KiB */
     int l2d_size;       /* kiB */
+    int simultaneous_prefetches; /* number of parallel prefetch */
 };
 
 #endif /* LOONGARCH_TUNE_H */
diff --git a/src/gcc/config/loongarch/loongarch.c b/src/gcc/config/loongarch/loongarch.c
index 92307bfcb..5963069fd 100644
--- a/src/gcc/config/loongarch/loongarch.c
+++ b/src/gcc/config/loongarch/loongarch.c
@@ -67,6 +67,7 @@ along with GCC; see the file COPYING3.  If not see
 #include "cfgloop.h"
 #include "gimple-iterator.h"
 #include "tree-vectorizer.h"
+#include "params.h"
 
 /* This file should be included last.  */
 #include "target-def.h"
@@ -7008,6 +7009,29 @@ loongarch_option_override_internal (struct gcc_options *opts,
   if (loongarch_vector_access_cost == 0)
     loongarch_vector_access_cost = 5;
 
+  /* Set up parameters to be used in prefetching algorithm. */
+  maybe_set_param_value (PARAM_SIMULTANEOUS_PREFETCHES,
+           loongarch_cpu_cache[LARCH_ACTUAL_TUNE].simultaneous_prefetches,
+           opts->x_param_values,
+           opts_set->x_param_values);
+  maybe_set_param_value (PARAM_L1_CACHE_LINE_SIZE,
+           loongarch_cpu_cache[LARCH_ACTUAL_TUNE].l1d_line_size,
+           opts->x_param_values,
+           opts_set->x_param_values);
+  maybe_set_param_value (PARAM_L1_CACHE_SIZE,
+           loongarch_cpu_cache[LARCH_ACTUAL_TUNE].l1d_size,
+           opts->x_param_values,
+           opts_set->x_param_values);
+  maybe_set_param_value (PARAM_L2_CACHE_SIZE,
+           loongarch_cpu_cache[LARCH_ACTUAL_TUNE].l2d_size,
+           opts->x_param_values,
+           opts_set->x_param_values);
+
+  /* Enable sw prefetching at -O3 and higher. */
+  if (opts->x_flag_prefetch_loop_arrays < 0
+      && (opts->x_optimize >= 3 || opts->x_flag_profile_use)
+      && !opts->x_optimize_size)
+    opts->x_flag_prefetch_loop_arrays = 1;
 
   switch (la_target.cmodel)
     {
@@ -10501,6 +10525,27 @@ void loongarch_emit_swrsqrtsf (rtx res, rtx a, machine_mode mode)
   emit_insn (gen_rtx_SET (res, gen_rtx_MULT (mode, gen_lowpart (mode, e5), e7)));
 }
 
+/* LoongArch only implements preld hint=0 (prefetch for load) and hint=8
+   (prefetch for store), other hint just scale to hint = 0 and hint = 1. */
+
+rtx
+loongarch_prefetch_cookie (rtx write, rtx locality)
+{
+  if (INTVAL (locality) == 1 && INTVAL (write) == 0)
+    return GEN_INT (INTVAL (write) + 2);
+
+  /* store.  */
+  if (INTVAL (write) == 1)
+    return GEN_INT (INTVAL (write) + 7);
+
+  /* load.  */
+  if (INTVAL (write) == 0)
+    return GEN_INT (INTVAL (write));
+
+  gcc_unreachable ();
+}
+
+
 
 /* Initialize the GCC target structure.  */
 #undef TARGET_ASM_ALIGNED_HI_OP
diff --git a/src/gcc/config/loongarch/loongarch.md b/src/gcc/config/loongarch/loongarch.md
index ba2857def..9b0ba9c38 100644
--- a/src/gcc/config/loongarch/loongarch.md
+++ b/src/gcc/config/loongarch/loongarch.md
@@ -3398,6 +3398,29 @@
 ;;  ....................
 ;;
 
+(define_insn "prefetch"
+  [(prefetch (match_operand 0 "address_operand" "p")
+         (match_operand 1 "const_int_operand" "n")
+         (match_operand 2 "const_int_operand" "n"))]
+  ""
+  {
+    operands[1] = loongarch_prefetch_cookie (operands[1], operands[2]);
+    return "preld\t%1,%a0";
+  }
+  [(set_attr "type" "prefetch")])
+
+(define_insn "*prefetch_indexed_<mode>"
+  [(prefetch (plus:P (match_operand 0 "register_operand" "r")
+             (match_operand 1 "register_operand" "r"))
+         (match_operand 2 "const_int_operand" "n")
+         (match_operand 3 "const_int_operand" "n"))]
+  ""
+  {
+    operands[2] = loongarch_prefetch_cookie (operands[2], operands[3]);
+    return "preldx\t%2,%1,%0";
+  }
+  [(set_attr "type" "prefetchx")])
+
 (define_insn "nop"
   [(const_int 0)]
   ""
-- 
2.31.1

