From 7ac918cb15db53ceb1b566e354fe3a1095a74d89 Mon Sep 17 00:00:00 2001
From: Lulu Cheng <chenglulu@loongson.cn>
Date: Tue, 31 Dec 2024 10:34:38 +0800
Subject: [PATCH v1 1/2] gcc-8-vec:  Fix bug for {div,mod}.w[u].

Change-Id: Ibebd7df0dcfe5af5fb18812e606dd7e3ca4ab005
---
 src/gcc/config/loongarch/loongarch.md         | 29 ++++++++++++-------
 .../g++.target/loongarch/div-combine.C        | 22 ++++++++++++++
 2 files changed, 41 insertions(+), 10 deletions(-)
 create mode 100644 src/gcc/testsuite/g++.target/loongarch/div-combine.C

diff --git a/src/gcc/config/loongarch/loongarch.md b/src/gcc/config/loongarch/loongarch.md
index ffcbbe2c7..3e9f293a8 100644
--- a/src/gcc/config/loongarch/loongarch.md
+++ b/src/gcc/config/loongarch/loongarch.md
@@ -70,6 +70,8 @@
 
   ;; RECIP
   UNSPEC_RECIPE
+
+  UNSPEC_FAKE_ANY_DIV
 ])
 
 (define_c_enum "unspecv" [
@@ -887,12 +889,13 @@
   [(set (match_operand:GPR 0 "register_operand")
 	(any_div:GPR (match_operand:GPR 1 "register_operand")
 		     (match_operand:GPR 2 "register_operand")))]
- ""
+  ""
 {
-  if (GET_MODE (operands[0]) == SImode)
+  if (GET_MODE (operands[0]) == SImode && TARGET_64BIT)
     {
       rtx reg1 = gen_reg_rtx (DImode);
       rtx reg2 = gen_reg_rtx (DImode);
+      rtx rd = gen_reg_rtx (DImode);
 
       operands[1] = gen_rtx_SIGN_EXTEND (word_mode, operands[1]);
       operands[2] = gen_rtx_SIGN_EXTEND (word_mode, operands[2]);
@@ -900,15 +903,17 @@
       emit_insn (gen_rtx_SET (reg1, operands[1]));
       emit_insn (gen_rtx_SET (reg2, operands[2]));
 
-      emit_insn (gen_<optab>di3_fake (operands[0], reg1, reg2));
+      emit_insn (gen_<optab>di3_fake (rd, reg1, reg2));
+      emit_insn (gen_rtx_SET (operands[0],
+			      simplify_gen_subreg (SImode, rd, DImode, 0)));
       DONE;
     }
 })
 
 (define_insn "*<optab><mode>3"
-  [(set (match_operand:GPR 0 "register_operand" "=&r")
-	(any_div:GPR (match_operand:GPR 1 "register_operand" "r")
-		     (match_operand:GPR 2 "register_operand" "r")))]
+  [(set (match_operand:X 0 "register_operand" "=&r")
+	(any_div:X (match_operand:X 1 "register_operand" "r")
+		     (match_operand:X 2 "register_operand" "r")))]
   ""
 {
   return loongarch_output_division ("<insn>.<d><u>\t%0,%1,%2", operands);
@@ -917,10 +922,14 @@
    (set_attr "mode" "<MODE>")])
 
 (define_insn "<optab>di3_fake"
-  [(set (match_operand:SI 0 "register_operand" "=&r")
-	(any_div:SI (match_operand:DI 1 "register_operand" "r")
-		    (match_operand:DI 2 "register_operand" "r")))]
-  ""
+  [(set (match_operand:DI 0 "register_operand" "=&r")
+	(sign_extend:DI
+	  (unspec:SI
+	   [(subreg:SI
+	     (any_div:DI (match_operand:DI 1 "register_operand" "r")
+			 (match_operand:DI 2 "register_operand" "r")) 0)]
+	  UNSPEC_FAKE_ANY_DIV)))]
+  "TARGET_64BIT"
 {
   return loongarch_output_division ("<insn>.w<u>\t%0,%1,%2", operands);
 }
diff --git a/src/gcc/testsuite/g++.target/loongarch/div-combine.C b/src/gcc/testsuite/g++.target/loongarch/div-combine.C
new file mode 100644
index 000000000..f7477453b
--- /dev/null
+++ b/src/gcc/testsuite/g++.target/loongarch/div-combine.C
@@ -0,0 +1,22 @@
+/* { dg-do compile } */
+/* { dg-options "-O1 -march=loongarch64 -mabi=lp64d" } */
+
+#include <memory>
+char *a;
+short b[1][8][8];
+void
+c (int d[][0][20], int e[][0], char f[][0][20], unsigned short g[][8][8],
+   int h[][8][8])
+{
+  for (int i;;)
+    for (int m;;)
+      for (int j;;)
+        for (char k;;)
+          for (int l; l < (h[i][j][i] ?: 1); l = 1)
+            {
+              *a = (unsigned short)f[m][m][m]
+                   % std::max (unsigned (!e[j][j]),
+                               std::max (1073741824U, (unsigned)g[i][m][j]));
+              b[m][k][m] = d[i][m][j] + 13738;
+            }
+}
-- 
2.20.1

