From 8721ea01adf094e1826e55babf76fc8a549697ba Mon Sep 17 00:00:00 2001
From: Yang Yujie <yangyujie@loongson.cn>
Date: Sun, 29 Jan 2023 15:20:15 +0800
Subject: [PATCH 26/28] LoongArch: compiler option updates

- Allow -m[arch|tune]=[native|abi-default|loongarch64|la464|la364|la264].
  (removed 2k1000la / 2k1500)

- Do not warn about inconsistencies between some architecture properties
  (SIMD extensions and cache sizes) obtained via "cpucfg" and their cor-
  -responding PRID preset values when -march=native is given.

- Fix the case where an empty --with-multilib-default causes
  a constant ARCH option (--with-arch) to be used for building
  all multilib variants (should use -march=abi-default instead).

Change-Id: I3c75a5beb7ae4f68d974332200f75ab6f877f228
---
 src/gcc/config.gcc                            | 67 ++++++++++---------
 .../loongarch/genopts/loongarch-strings       |  3 +-
 .../config/loongarch/genopts/loongarch.opt.in |  5 +-
 src/gcc/config/loongarch/loongarch-cpu.c      | 10 ++-
 src/gcc/config/loongarch/loongarch-def.c      | 43 ++++--------
 src/gcc/config/loongarch/loongarch-def.h      |  9 ++-
 src/gcc/config/loongarch/loongarch-opts.h     |  5 +-
 src/gcc/config/loongarch/loongarch-str.h      |  3 +-
 src/gcc/config/loongarch/loongarch.c          |  6 +-
 src/gcc/config/loongarch/loongarch.opt        |  5 +-
 src/gcc/config/loongarch/t-linux              |  2 +-
 11 files changed, 70 insertions(+), 88 deletions(-)

diff --git a/src/gcc/config.gcc b/src/gcc/config.gcc
index 1a17d2369..e470a49e7 100644
--- a/src/gcc/config.gcc
+++ b/src/gcc/config.gcc
@@ -4465,7 +4465,7 @@ case "${target}" in
 
 		# Perform initial sanity checks on --with-* options.
 		case ${with_arch} in
-		"" | abi-default | loongarch64 | la464 | la264 | 2k1000la | 2k1500) ;; # OK, append here.
+		"" | abi-default | loongarch64 | la[234]64) ;; # OK, append here.
 		native)
 			if test x${host} != x${target}; then
 				echo "--with-arch=native is illegal for cross-compiler." 1>&2
@@ -4564,7 +4564,7 @@ case "${target}" in
 		case ${with_abi}/${with_abiext} in
 		lp64*/base)
 			# architectures that support lp64* ABI
-			arch_pattern="native|abi-default|loongarch64|la464|la264|2k1000la|2k1500"
+			arch_pattern="native|abi-default|loongarch64|la[234]64"
 			# default architecture for lp64* ABI
 			arch_default="abi-default"
 			;;
@@ -4639,7 +4639,7 @@ case "${target}" in
 		# Check default with_tune configuration using with_arch.
 		case ${with_arch} in
 		loongarch64)
-			tune_pattern="abi-default|loongarch64|la464|la264|2k1000la|2k1500"
+			tune_pattern="native|abi-default|loongarch64|la[234]64"
 			;;
 		*)
 			# By default, $with_tune == $with_arch
@@ -4667,33 +4667,38 @@ case "${target}" in
 			exit 1
 		fi
 
-		unset parse_state component
-		parse_state=arch
-		for component in $(echo "${with_multilib_default}" | tr '/' ' '); do
-			case ${parse_state},${component} in
-			arch,|arch,abi-default)
-				# ABI-default: use the ABI's default ARCH configuration for
-				# multilib library builds, unless otherwise specified
-				# in --with-multilib-list.
-				with_multilib_default="/march=abi-default"
-				parse_state=opts
-				;;
-			arch,fixed)
-				# Fixed: use the default gcc configuration for all multilib
-				# builds by default.
-				with_multilib_default=""
-				parse_state=opts
-				;;
-			arch,*)
-				with_multilib_default="/march=abi-default"
-				parse_state=opts
-				;&
-			opts,*)
-				with_multilib_default="${with_multilib_default}/${component}"
-				;;
-			esac
-		done
-		unset parse_state component
+		if test x${with_multilib_default} = x; then
+			# Use -march=abi-default by default when building libraries.
+			with_multilib_default="/march=abi-default"
+		else
+			unset parse_state component
+			parse_state=arch
+			for component in $(echo "${with_multilib_default}" | tr '/' ' '); do
+				case ${parse_state},${component} in
+				arch,|arch,abi-default)
+					# ABI-default: use the ABI's default ARCH configuration for
+					# multilib library builds, unless otherwise specified
+					# in --with-multilib-list.
+					with_multilib_default="/march=abi-default"
+					parse_state=opts
+					;;
+				arch,fixed)
+					# Fixed: use the default gcc configuration for all multilib
+					# builds by default.
+					with_multilib_default=""
+					parse_state=opts
+					;;
+				arch,*)
+					with_multilib_default="/march=abi-default"
+					parse_state=opts
+					;&
+				opts,*)
+					with_multilib_default="${with_multilib_default}/${component}"
+					;;
+				esac
+			done
+			unset parse_state component
+		fi
 
 		# Handle --with-multilib-list.
 		if test x"${with_multilib_list}" = x \
@@ -4769,7 +4774,7 @@ case "${target}" in
 				arch)
 					# -march option
 					case ${component} in
-					abi-default | loongarch64 | la464 | la264 | 2k1000la | 2k1500) # OK, append here.
+					abi-default | loongarch64 | la[234]64) # OK, append here.
 						# Append -march spec for each multilib variant.
 						loongarch_multilib_list_make="${loongarch_multilib_list_make}/march=${component}"
 						;&
diff --git a/src/gcc/config/loongarch/genopts/loongarch-strings b/src/gcc/config/loongarch/genopts/loongarch-strings
index eedadadb0..3de64a391 100644
--- a/src/gcc/config/loongarch/genopts/loongarch-strings
+++ b/src/gcc/config/loongarch/genopts/loongarch-strings
@@ -26,9 +26,8 @@ STR_CPU_NATIVE	      native
 STR_CPU_ABI_DEFAULT   abi-default
 STR_CPU_LOONGARCH64   loongarch64
 STR_CPU_LA464	      la464
+STR_CPU_LA364	      la364
 STR_CPU_LA264	      la264
-STR_CPU_2K1000LA      2k1000la
-STR_CPU_2K1500        2k1500
 
 # Base architecture
 STR_ISA_BASE_LA64V100 la64
diff --git a/src/gcc/config/loongarch/genopts/loongarch.opt.in b/src/gcc/config/loongarch/genopts/loongarch.opt.in
index 8206664b8..f054cfa45 100644
--- a/src/gcc/config/loongarch/genopts/loongarch.opt.in
+++ b/src/gcc/config/loongarch/genopts/loongarch.opt.in
@@ -115,10 +115,7 @@ EnumValue
 Enum(cpu_type) String(@@STR_CPU_LA264@@) Value(CPU_LA264)
 
 EnumValue
-Enum(cpu_type) String(@@STR_CPU_2K1000LA@@) Value(CPU_2K1000LA)
-
-EnumValue
-Enum(cpu_type) String(@@STR_CPU_2K1500@@) Value(CPU_2K1500)
+Enum(cpu_type) String(@@STR_CPU_LA364@@) Value(CPU_LA364)
 
 m@@OPTSTR_ARCH@@=
 Target RejectNegative Joined Enum(cpu_type) Var(la_opt_cpu_arch) Init(M_OPT_UNSET)
diff --git a/src/gcc/config/loongarch/loongarch-cpu.c b/src/gcc/config/loongarch/loongarch-cpu.c
index c9b859381..4d97fbff0 100644
--- a/src/gcc/config/loongarch/loongarch-cpu.c
+++ b/src/gcc/config/loongarch/loongarch-cpu.c
@@ -104,6 +104,10 @@ fill_native_cpu_config (struct loongarch_target *tgt)
       native_cpu_type = CPU_LA464;
       break;
 
+    case 0x0014b000:   /* LA364 */
+      native_cpu_type = CPU_LA364;
+      break;
+
     case 0x0014a000:   /* LA264 */
       native_cpu_type = CPU_LA264;
       break;
@@ -213,10 +217,12 @@ fill_native_cpu_config (struct loongarch_target *tgt)
 	}
 
       /* Check consistency with PRID presets.  */
+      /*
       if (native_cpu_type != CPU_NATIVE && tmp != PRESET_SIMD)
 	warning (0, "SIMD extension %qs differs from PRID preset %qs",
 		 loongarch_isa_ext_strings[tmp],
 		 loongarch_isa_ext_strings[PRESET_SIMD]);
+      */
 
       /* Use the native value anyways.  */
       PRESET_SIMD = tmp;
@@ -260,16 +266,18 @@ fill_native_cpu_config (struct loongarch_target *tgt)
 	* (1 << ((l2_szword & 0x7f000000) >> 24)) /* bit[30:24]: log2(linesz) */
 	>> 10;					  /* in kibibytes */
 
+      /*
       if (native_cpu_type != CPU_NATIVE && (
 	  native_cache.l1d_line_size != PRESET_CACHE.l1d_line_size ||
 	  native_cache.l1d_size != PRESET_CACHE.l1d_size ||
 	  native_cache.l2d_size != PRESET_CACHE.l2d_size))
-	warning (0, "native cache info (%<L1 %dK, L2 %dK, %dB%>)"
+	warning (0, "native cache info (%<L1 %dK, L2 %dK, %dB%>) "
 		    "differs from PRID preset (%<L1 %dK, L2 %dK, %dB%>)",
 		    native_cache.l1d_size, native_cache.l2d_size,
 		    native_cache.l1d_line_size,
 		    PRESET_CACHE.l1d_size, PRESET_CACHE.l2d_size,
 		    PRESET_CACHE.l1d_line_size);
+      */
 
       /* Use the native value anyways.  */
       PRESET_CACHE.l1d_line_size = native_cache.l1d_line_size;
diff --git a/src/gcc/config/loongarch/loongarch-def.c b/src/gcc/config/loongarch/loongarch-def.c
index cb1fd6ee0..0a25de750 100644
--- a/src/gcc/config/loongarch/loongarch-def.c
+++ b/src/gcc/config/loongarch/loongarch-def.c
@@ -28,9 +28,8 @@ loongarch_cpu_strings[N_TUNE_TYPES] = {
   [CPU_ABI_DEFAULT]	  = STR_CPU_ABI_DEFAULT,
   [CPU_LOONGARCH64]	  = STR_CPU_LOONGARCH64,
   [CPU_LA464]		  = STR_CPU_LA464,
+  [CPU_LA364]		  = STR_CPU_LA364,
   [CPU_LA264]		  = STR_CPU_LA264,
-  [CPU_2K1000LA]          = STR_CPU_2K1000LA,
-  [CPU_2K1500]            = STR_CPU_2K1500,
 };
 
 struct loongarch_isa
@@ -45,20 +44,15 @@ loongarch_cpu_default_isa[N_ARCH_TYPES] = {
       .fpu = ISA_EXT_FPU64,
       .simd = ISA_EXT_SIMD_LASX,
   },
-  [CPU_LA264] = {
-      .base = ISA_BASE_LA64V100,
-      .fpu = ISA_EXT_FPU64,
-      .simd = 0,
-  },
-  [CPU_2K1000LA] = {
+  [CPU_LA364] = {
       .base = ISA_BASE_LA64V100,
       .fpu = ISA_EXT_FPU64,
       .simd = ISA_EXT_SIMD_LSX,
   },
-  [CPU_2K1500] = {
+  [CPU_LA264] = {
       .base = ISA_BASE_LA64V100,
       .fpu = ISA_EXT_FPU64,
-      .simd = 0,
+      .simd = ISA_EXT_SIMD_LSX,
   },
 };
 
@@ -76,22 +70,16 @@ loongarch_cpu_cache[N_TUNE_TYPES] = {
       .l2d_size = 256,
       .simultaneous_prefetches = 4,
   },
-  [CPU_LA264] = {
-      .l1d_line_size = 64,
-      .l1d_size = 32,
-      .l2d_size = 1024,
-      .simultaneous_prefetches = 4,
-  },
-  [CPU_2K1000LA] = {
+  [CPU_LA364] = {
       .l1d_line_size = 64,
-      .l1d_size = 32,
-      .l2d_size = 1024,
+      .l1d_size = 64,
+      .l2d_size = 0,
       .simultaneous_prefetches = 4,
   },
-  [CPU_2K1500] = {
+  [CPU_LA264] = {
       .l1d_line_size = 64,
       .l1d_size = 32,
-      .l2d_size = 2048,
+      .l2d_size = 0,
       .simultaneous_prefetches = 4,
   },
 };
@@ -128,13 +116,10 @@ loongarch_cpu_rtx_cost_data[N_TUNE_TYPES] = {
   [CPU_LA464] = {
       DEFAULT_COSTS
   },
-  [CPU_LA264] = {
+  [CPU_LA364] = {
       DEFAULT_COSTS
   },
-  [CPU_2K1000LA] = {
-      DEFAULT_COSTS
-  },
-  [CPU_2K1500] = {
+  [CPU_LA264] = {
       DEFAULT_COSTS
   },
 };
@@ -160,9 +145,8 @@ loongarch_cpu_issue_rate[N_TUNE_TYPES] = {
   [CPU_NATIVE]	      = 4,
   [CPU_LOONGARCH64]   = 4,
   [CPU_LA464]	      = 4,
+  [CPU_LA364]	      = 3,
   [CPU_LA264]	      = 2,
-  [CPU_2K1000LA]      = 2,
-  [CPU_2K1500]        = 2,
 };
 
 int
@@ -170,9 +154,8 @@ loongarch_cpu_multipass_dfa_lookahead[N_TUNE_TYPES] = {
   [CPU_NATIVE]	      = 4,
   [CPU_LOONGARCH64]   = 4,
   [CPU_LA464]	      = 4,
+  [CPU_LA364]	      = 4,
   [CPU_LA264]	      = 4,
-  [CPU_2K1000LA]      = 4,
-  [CPU_2K1500]        = 4,
 };
 
 /* Wiring string definitions from loongarch-str.h to global arrays
diff --git a/src/gcc/config/loongarch/loongarch-def.h b/src/gcc/config/loongarch/loongarch-def.h
index 3b6d51c6e..93ff802ee 100644
--- a/src/gcc/config/loongarch/loongarch-def.h
+++ b/src/gcc/config/loongarch/loongarch-def.h
@@ -139,11 +139,10 @@ struct loongarch_target
 #define CPU_ABI_DEFAULT   1
 #define CPU_LOONGARCH64	  2
 #define CPU_LA464	  3
-#define CPU_LA264	  4
-#define CPU_2K1000LA      5
-#define CPU_2K1500        6
-#define N_ARCH_TYPES	  7
-#define N_TUNE_TYPES	  7
+#define CPU_LA364	  4
+#define CPU_LA264	  5
+#define N_ARCH_TYPES	  6
+#define N_TUNE_TYPES	  6
 #define CPU_NONE          7
 
 /* parallel tables */
diff --git a/src/gcc/config/loongarch/loongarch-opts.h b/src/gcc/config/loongarch/loongarch-opts.h
index 9030ca224..c96c8a6ed 100644
--- a/src/gcc/config/loongarch/loongarch-opts.h
+++ b/src/gcc/config/loongarch/loongarch-opts.h
@@ -87,9 +87,8 @@ loongarch_update_gcc_opt_status (struct loongarch_target *target,
 
 /* TARGET_ macros for use in *.md template conditionals */
 #define TARGET_uARCH_LA464	  (la_target.cpu_tune == CPU_LA464)
-#define TARGET_uARCH_LA264	  (la_target.cpu_tune == CPU_LA264 \
-				   || la_target.cpu_tune == CPU_2K1000LA \
-				   || la_target.cpu_tune == CPU_2K1500)
+#define TARGET_uARCH_LA364	  (la_target.cpu_tune == CPU_LA364)
+#define TARGET_uARCH_LA264	  (la_target.cpu_tune == CPU_LA264)
 
 /* Note: optimize_size may vary across functions,
    while -m[no]-memcpy imposes a global constraint.  */
diff --git a/src/gcc/config/loongarch/loongarch-str.h b/src/gcc/config/loongarch/loongarch-str.h
index 76def7428..f49ff5e7e 100644
--- a/src/gcc/config/loongarch/loongarch-str.h
+++ b/src/gcc/config/loongarch/loongarch-str.h
@@ -30,9 +30,8 @@ along with GCC; see the file COPYING3.  If not see
 #define STR_CPU_ABI_DEFAULT "abi-default"
 #define STR_CPU_LOONGARCH64 "loongarch64"
 #define STR_CPU_LA464 "la464"
+#define STR_CPU_LA364 "la364"
 #define STR_CPU_LA264 "la264"
-#define STR_CPU_2K1000LA "2k1000la"
-#define STR_CPU_2K1500 "2k1500"
 
 #define STR_ISA_BASE_LA64V100 "la64"
 
diff --git a/src/gcc/config/loongarch/loongarch.c b/src/gcc/config/loongarch/loongarch.c
index 8440c3b73..81100d754 100644
--- a/src/gcc/config/loongarch/loongarch.c
+++ b/src/gcc/config/loongarch/loongarch.c
@@ -6996,10 +6996,7 @@ loongarch_cpu_option_override (struct loongarch_target *target,
   switch (target->cpu_arch)
     {
       case CPU_LA264:
-      case CPU_2K1000LA:
-      case CPU_2K1500:
-
-	/* Using -mstrict-align is recommended for 2K1000LA/2K1500.  */
+	/* Using -mstrict-align is recommended for la264 cores.  */
 	if (!opts_set->x_TARGET_STRICT_ALIGN)
 	  {
 	    opts->x_TARGET_STRICT_ALIGN = 1;
@@ -7008,7 +7005,6 @@ loongarch_cpu_option_override (struct loongarch_target *target,
 	break;
     }
 
-
   /* software prefetching parameters (-fprefetch-loop-arrays) */
   maybe_set_param_value (PARAM_SIMULTANEOUS_PREFETCHES,
     loongarch_cpu_cache[target->cpu_tune].simultaneous_prefetches,
diff --git a/src/gcc/config/loongarch/loongarch.opt b/src/gcc/config/loongarch/loongarch.opt
index 7f98cabbc..48b667c82 100644
--- a/src/gcc/config/loongarch/loongarch.opt
+++ b/src/gcc/config/loongarch/loongarch.opt
@@ -122,10 +122,7 @@ EnumValue
 Enum(cpu_type) String(la264) Value(CPU_LA264)
 
 EnumValue
-Enum(cpu_type) String(2k1000la) Value(CPU_2K1000LA)
-
-EnumValue
-Enum(cpu_type) String(2k1500) Value(CPU_2K1500)
+Enum(cpu_type) String(la364) Value(CPU_LA364)
 
 march=
 Target RejectNegative Joined Enum(cpu_type) Var(la_opt_cpu_arch) Init(M_OPT_UNSET)
diff --git a/src/gcc/config/loongarch/t-linux b/src/gcc/config/loongarch/t-linux
index 906f27840..a32b4d862 100644
--- a/src/gcc/config/loongarch/t-linux
+++ b/src/gcc/config/loongarch/t-linux
@@ -33,7 +33,7 @@ gen_mlib_spec = $(if $(word 2,$1),\
 		%{$(firstword $1):$(patsubst %,-%,$(wordlist 2,$(words $1),$1))})
 
 # clean up the result of DRIVER_SELF_SPEC to avoid conflict
-lib_build_self_spec  = %<march=* %<mtune=* %<mcmodel=* %<mfpu=* %<msimd=
+lib_build_self_spec  = %<march=* %<mtune=* %<mcmodel=* %<mfpu=* %<msimd=*
 
 # build libraries with -mstrict-align by default
 lib_build_self_spec += -mstrict-align
-- 
2.31.1

