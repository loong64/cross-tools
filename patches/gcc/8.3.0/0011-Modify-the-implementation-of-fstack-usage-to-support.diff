From 5466396e90caba9ac7ad779ae83e2c31a5f676fb Mon Sep 17 00:00:00 2001
From: Sai Mengna <saimengna@loongson.cn>
Date: Fri, 18 Nov 2022 11:12:05 +0800
Subject: [PATCH 09/28] Modify the implementation of -fstack-usage to support
 realign and add -mforce-drap -mstackrealign

gcc/ChangeLog:

        * config/loongarch/genopts/loongarch.opt.in:Add -mforce-drap and -mstackrealign options
	* config/loongarch/loongarch.h:Do not start the realign function when using the -mno-stackrealign
        * config/loongarch/loongarch.c:Modify the implementation of -fstack-usage to support realign
        * config/loongarch/loongarch.opt:Add -mforce-drap and -mstackrealign options

gcc/testsuite/ChangeLog:

        * gcc.target/loongarch/stack-realign.c: New test case.
        * gcc.target/loongarch/stack-usage-realign.c: New test case.

Change-Id: I3eb29c2b997f3d023f9578d756b5c2054dceb88e
---
 .../config/loongarch/genopts/loongarch.opt.in |  8 +++++
 src/gcc/config/loongarch/loongarch.c          | 13 +++++--
 src/gcc/config/loongarch/loongarch.h          |  2 +-
 src/gcc/config/loongarch/loongarch.opt        |  8 +++++
 .../gcc.target/loongarch/stack-realign.c      | 34 +++++++++++++++++++
 .../loongarch/stack-usage-realign.c           | 19 +++++++++++
 6 files changed, 81 insertions(+), 3 deletions(-)
 create mode 100644 src/gcc/testsuite/gcc.target/loongarch/stack-realign.c
 create mode 100644 src/gcc/testsuite/gcc.target/loongarch/stack-usage-realign.c

diff --git a/src/gcc/config/loongarch/genopts/loongarch.opt.in b/src/gcc/config/loongarch/genopts/loongarch.opt.in
index d1ec5f8a7..141d03eaa 100644
--- a/src/gcc/config/loongarch/genopts/loongarch.opt.in
+++ b/src/gcc/config/loongarch/genopts/loongarch.opt.in
@@ -155,6 +155,14 @@ mveclibabi=
 Target RejectNegative Joined Var(loongarch_veclibabi_name)
 Vector library ABI to use.
 
+mstackrealign
+Target Var(loongarch_stack_realign) Init(1)
+Realign stack in prologue.
+
+mforce-drap
+Target Var(loongarch_force_drap) Init(0)
+Always use Dynamic Realigned Argument Pointer (DRAP) to realign stack.
+
 mcheck-zero-division
 Target Mask(CHECK_ZERO_DIV)
 Trap on integer divide by zero.
diff --git a/src/gcc/config/loongarch/loongarch.c b/src/gcc/config/loongarch/loongarch.c
index c4ec73db3..53baadf95 100644
--- a/src/gcc/config/loongarch/loongarch.c
+++ b/src/gcc/config/loongarch/loongarch.c
@@ -845,6 +845,9 @@ loongarch_get_drap_rtx (void)
       return NULL;
     }
 
+  if (loongarch_force_drap)
+     crtl->need_drap = true;
+
   if (stack_realign_drap)
     {
       /* Assign DRAP to vDRAP and returns vDRAP */
@@ -1321,7 +1324,7 @@ loongarch_expand_prologue (void)
   HOST_WIDE_INT saved_gpr_num = 0;
 
   /* Finalize crtl->stack_realign_needed and frame_pointer_needed flags.  */
-  if(crtl->stack_realign_needed || (!flag_omit_frame_pointer && optimize))
+  if((crtl->stack_realign_needed || (!flag_omit_frame_pointer && optimize)) && loongarch_stack_realign)
     {
       unsigned int incoming_stack_boundary
 	= (crtl->parm_stack_boundary > PREFERRED_STACK_BOUNDARY
@@ -1382,7 +1385,13 @@ loongarch_expand_prologue (void)
   realign_size = crtl->stack_alignment_needed / BITS_PER_UNIT;
 
   if (flag_stack_usage_info)
-    current_function_static_stack_size = size;
+    {
+      if (stack_realign_drap)
+        {
+          current_function_dynamic_stack_size += crtl->stack_alignment_needed / BITS_PER_UNIT;
+        }
+          current_function_static_stack_size = size;
+    }
 
   /* When stack_realign_drap is true, save current sp in drap-reg then realign.  */
   if (stack_realign_drap)
diff --git a/src/gcc/config/loongarch/loongarch.h b/src/gcc/config/loongarch/loongarch.h
index 1efadc13c..cd9c52996 100644
--- a/src/gcc/config/loongarch/loongarch.h
+++ b/src/gcc/config/loongarch/loongarch.h
@@ -699,7 +699,7 @@ enum reg_class
 #define STACK_BOUNDARY (TARGET_ABI_LP64 ? 128 : 64)
 
 /* Maximum stack alignment.  */
-#define MAX_STACK_ALIGNMENT MAX_OFILE_ALIGNMENT
+#define MAX_STACK_ALIGNMENT (loongarch_stack_realign ? MAX_OFILE_ALIGNMENT : STACK_BOUNDARY)
 
 /* Symbolic macros for the registers used to return integer and floating
    point values.  */
diff --git a/src/gcc/config/loongarch/loongarch.opt b/src/gcc/config/loongarch/loongarch.opt
index 14d7f3e46..e9b36591b 100644
--- a/src/gcc/config/loongarch/loongarch.opt
+++ b/src/gcc/config/loongarch/loongarch.opt
@@ -162,6 +162,14 @@ mveclibabi=
 Target RejectNegative Joined Var(loongarch_veclibabi_name)
 Vector library ABI to use.
 
+mstackrealign
+Target Var(loongarch_stack_realign) Init(1)
+Realign stack in prologue.
+
+mforce-drap
+Target Var(loongarch_force_drap) Init(0)
+Always use Dynamic Realigned Argument Pointer (DRAP) to realign stack.
+
 mcheck-zero-division
 Target Mask(CHECK_ZERO_DIV)
 Trap on integer divide by zero.
diff --git a/src/gcc/testsuite/gcc.target/loongarch/stack-realign.c b/src/gcc/testsuite/gcc.target/loongarch/stack-realign.c
new file mode 100644
index 000000000..17fe22d91
--- /dev/null
+++ b/src/gcc/testsuite/gcc.target/loongarch/stack-realign.c
@@ -0,0 +1,34 @@
+/* { dg-do compile } */
+/* { dg-options "-mlasx -O -mstackrealign" } */
+
+extern void abort (void);
+
+typedef double __m256 __attribute__ ((__vector_size__ (32), __may_alias__));
+
+static __m256
+load_m256 (double *e)
+{
+  return * (__m256 *) e;
+}
+
+typedef union
+{
+  __m256  x;
+  double a[4];
+} union256;
+
+void test (void)
+{
+  union256 u;
+  double e[4] __attribute__ ((aligned (32)))
+    = {2134.3343, 1234.635654, 1.2234, 876.8976};
+  int i;
+
+  u.x = load_m256 (e);
+
+  for (i = 0; i < 4; i++)
+    if (u.a[i] != e[i])
+      abort ();
+}
+
+/* { dg-final { scan-assembler "bstrins.d\t\\\$r3,\\\$r0,4,0" } } */
diff --git a/src/gcc/testsuite/gcc.target/loongarch/stack-usage-realign.c b/src/gcc/testsuite/gcc.target/loongarch/stack-usage-realign.c
new file mode 100644
index 000000000..666d84276
--- /dev/null
+++ b/src/gcc/testsuite/gcc.target/loongarch/stack-usage-realign.c
@@ -0,0 +1,19 @@
+/* { dg-do compile } */
+/* { dg-options "-fstack-usage -mlasx -mforce-drap -mstackrealign" } */
+
+typedef int __attribute__((vector_size(32))) vec;
+
+vec foo (vec v)
+{
+  return v;
+}
+
+int main (void)
+{
+  vec V;
+  V = foo (V);
+  return 0;
+}
+
+/* { dg-final { scan-stack-usage "main\t96\tdynamic,bounded" } } */
+/* { dg-final { cleanup-stack-usage } } */
-- 
2.31.1

