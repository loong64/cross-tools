From 731e1a585379da4297cacb6db11bc3e15a52da60 Mon Sep 17 00:00:00 2001
From: Yang Yujie <yangyujie@loongson.cn>
Date: Wed, 4 Jan 2023 15:26:30 +0800
Subject: [PATCH 22/28] LoongArch: improve the flexibility of
 --with-multilib-list

* It allows the build options for all multilib libraries to be
  controlled independently.
  (e.g. --with-multilib-list=lp64d/mlsx,lp64f/mfpu=32,lp64s/la264/mfpu=0)

* These auxiliary options are only effective during the build of libraries,
  and the triggering conditions of choosing multilib variants remains unchanged.

* The user can specify the default build option of all multilib variants
  using --with-multilib-default=[fixed|abi-default|][/<option>]...

Change-Id: I29cff71221f19ba8382fc094c93e9832d9fcaf67
---
 src/gcc/config.gcc               | 166 +++++++++++++++++++++----------
 src/gcc/config/loongarch/t-linux |  19 +++-
 2 files changed, 129 insertions(+), 56 deletions(-)

diff --git a/src/gcc/config.gcc b/src/gcc/config.gcc
index 38b68ae79..1a17d2369 100644
--- a/src/gcc/config.gcc
+++ b/src/gcc/config.gcc
@@ -4411,7 +4411,7 @@ case "${target}" in
 		;;
 
 	loongarch*-*-*)
-		supported_defaults="abi arch tune fpu"
+		supported_defaults="abi arch tune fpu multilib-default"
 
 		# Local variables
 		unset \
@@ -4660,6 +4660,41 @@ case "${target}" in
 			;;
 		esac
 
+		# Handle --with-multilib-default
+		if echo "${with_multilib_default}" \
+		| grep -E -e '[[:space:]]' -e '//' -e '/$' -e '^/' > /dev/null 2>&1; then
+			echo "Invalid argument to --with-multilib-default." 1>&2
+			exit 1
+		fi
+
+		unset parse_state component
+		parse_state=arch
+		for component in $(echo "${with_multilib_default}" | tr '/' ' '); do
+			case ${parse_state},${component} in
+			arch,|arch,abi-default)
+				# ABI-default: use the ABI's default ARCH configuration for
+				# multilib library builds, unless otherwise specified
+				# in --with-multilib-list.
+				with_multilib_default="/march=abi-default"
+				parse_state=opts
+				;;
+			arch,fixed)
+				# Fixed: use the default gcc configuration for all multilib
+				# builds by default.
+				with_multilib_default=""
+				parse_state=opts
+				;;
+			arch,*)
+				with_multilib_default="/march=abi-default"
+				parse_state=opts
+				;&
+			opts,*)
+				with_multilib_default="${with_multilib_default}/${component}"
+				;;
+			esac
+		done
+		unset parse_state component
+
 		# Handle --with-multilib-list.
 		if test x"${with_multilib_list}" = x \
 		   || test x"${with_multilib_list}" = xno \
@@ -4682,22 +4717,20 @@ case "${target}" in
 		# ${with_multilib_list} should not contain whitespaces,
 		# consecutive commas or slashes.
 		if echo "${with_multilib_list}" \
-		| grep -E -e "[[:space:]]" -e '[,/][,/]' -e '[,/]$' -e '^[,/]' > /dev/null; then
+		| grep -E -e "[[:space:]]" -e '[,/][,/]' -e '[,/]$' -e '^[,/]' > /dev/null 2>&1; then
 			echo "Invalid argument to --with-multilib-list." 1>&2
 			exit 1
 		fi
 
-		unset component idx elem_abi_base elem_abi_ext elem_tmp abi_complete
+		unset component elem_abi_base elem_abi_ext elem_tmp parse_state all_abis
 		for elem in $(echo "${with_multilib_list}" | tr ',' ' '); do
-			idx=0
-			abi_complete=no
-			while true; do
-				idx=$((idx + 1))
-				component=$(echo "${elem}" | awk -F'/' '{print $'"${idx}"'}')
-
-				case ${idx} in
-				1)
-					# Component 1: Base ABI type
+			unset elem_abi_base elem_abi_ext
+			parse_state="abi-base"
+
+			for component in $(echo "${elem}" | tr '/' ' '); do
+				case ${parse_state} in
+				abi-base)
+					# Base ABI type
 					case ${component} in
 					lp64 | lp64d) elem_tmp="ABI_BASE_LP64D,";;
 					lp64f) elem_tmp="ABI_BASE_LP64F,";;
@@ -4710,73 +4743,98 @@ case "${target}" in
 					loongarch_multilib_list_c="${loongarch_multilib_list_c}${elem_tmp}"
 					loongarch_multilib_list_make="${loongarch_multilib_list_make}mabi=${component}"
 					elem_abi_base="${component}"
+
+					parse_state="abi-ext"
 					;;
 
-				2|3)
-					# Other components: ABI extension type / default ARCH
+				abi-ext)
+					# ABI extension type
 					case ${component} in
-					"" | base)
-						if test x${component} = xbase && test x${idx} = x3; then
-						    echo "ABI extension \"${component}\"" \
-						         "should follow the base ABI type in --with-multilib-list." 1>&2
-						    exit 1
-						fi
-						if test x${abi_complete} = xno; then
-						    elem_abi_ext="base"
-						    loongarch_multilib_list_make="${loongarch_multilib_list_make}" # Add nothing for now.
-						    loongarch_multilib_list_c="${loongarch_multilib_list_c}ABI_EXT_BASE,"
-						    abi_complete=yes
-						fi
-
-						if test x${component} = x; then
-						    # End of component list.
-						    break
-						fi
+					base)
+						elem_abi_ext="base"
+						loongarch_multilib_list_c="${loongarch_multilib_list_c}ABI_EXT_BASE,"
+						loongarch_multilib_list_make="${loongarch_multilib_list_make}" # Add nothing for now.
+						parse_state="arch"
+						continue;
 						;;
+					esac
 
+					# The default ABI extension is "base" if unspecified.
+					elem_abi_ext="base"
+					loongarch_multilib_list_c="${loongarch_multilib_list_c}ABI_EXT_BASE,"
+					loongarch_multilib_list_make="${loongarch_multilib_list_make}" # Add nothing for now.
+					parse_state="arch"
+					;&
+
+				arch)
+					# -march option
+					case ${component} in
 					abi-default | loongarch64 | la464 | la264 | 2k1000la | 2k1500) # OK, append here.
-						# The default ABI extension is "base".
-						if test x${abi_complete} = xno; then
-						    elem_abi_ext="base"
-						    loongarch_multilib_list_make="${loongarch_multilib_list_make}" # Add nothing for now.
-						    loongarch_multilib_list_c="${loongarch_multilib_list_c}ABI_EXT_BASE,"
-						    abi_complete=yes
-						fi
 						# Append -march spec for each multilib variant.
 						loongarch_multilib_list_make="${loongarch_multilib_list_make}/march=${component}"
-						idx=3
-						;;
-					*)
-						echo "Unknown ABI extension or ARCH type \"${component}\" in --with-multilib-list." 1>&2
-						exit 1
+						;&
+
+					default)
+						# "/default" is equivalent to --with-multilib-default=fixed
+						parse_state="opts"
+						continue;
 						;;
 					esac
 
-					;;
+					# If ARCH is unspecified for this multilib variant, use ${with_multllib_default}.
+					loongarch_multilib_list_make="${loongarch_multilib_list_make}${with_multilib_default}"
+					parse_state="opts"
+					;&
 
-				*)
-					# Component 4 and on: optional stuff
+				opts)
+					# Other compiler options for building libraries.
+					# (no static sanity check performed)
 					case ${component} in
-					"")
-						# End of component list.
-						break
-						;;
 					*)
-						echo "Unknown multilib variant \"${elem}\" in --with-multilib-list." 1>&2
-						exit 1
+						# Append other components as additional build options
+						# (without the prepending dash).
+						# Their validity should be examined by the compiler.
+						loongarch_multilib_list_make="${loongarch_multilib_list_make}/${component}"
 						;;
 					esac
 					;;
+
 				esac
 			done
 
-			if test x${abi_complete} = xyes \
-			&& test x${elem_abi_base} = x${with_abi} \
+			case ${parse_state} in
+			    "abi-ext")
+					elem_abi_ext="base"
+					loongarch_multilib_list_c="${loongarch_multilib_list_c}ABI_EXT_BASE,"
+					loongarch_multilib_list_make="${loongarch_multilib_list_make}" # Add nothing for now.
+					;&
+			    "arch")
+					# If ARCH is unspecified for this multilib variant, use ${with_multllib_default}.
+					loongarch_multilib_list_make="${loongarch_multilib_list_make}${with_multilib_default}"
+					;&
+			    "opts")
+					;;
+			esac
+
+			# Check for repeated configuration of the same multilib variant.
+		        if echo "${elem_abi_base}/${elem_abi_ext}" \
+			 | grep -E "^(${all_abis%|})$" >/dev/null 2>&1; then
+				echo "Repeated multilib config of \"${elem_abi_base}/${elem_abi_ext}\" in --with-multilib-list."
+				exit 1
+			fi
+			all_abis+="${elem_abi_base}/${elem_abi_ext}|"
+
+
+			# Check if the default ABI configuration of the GCC binary
+			# is included in the enabled multilib variants.
+			if test x${elem_abi_base} = x${with_abi} \
 			&& test x${elem_abi_ext} = x${with_abiext}; then
 				loongarch_multilib_list_sane=yes
 			fi
 			loongarch_multilib_list_make="${loongarch_multilib_list_make},"
 		done
+		unset component elem_abi_base elem_abi_ext elem_tmp parse_state all_abis
+
 
 		# Check if the default ABI combination is in the default list.
 		if test x${loongarch_multilib_list_sane} = xno; then
diff --git a/src/gcc/config/loongarch/t-linux b/src/gcc/config/loongarch/t-linux
index a0ce03f2e..b368de028 100644
--- a/src/gcc/config/loongarch/t-linux
+++ b/src/gcc/config/loongarch/t-linux
@@ -29,13 +29,28 @@ MULTILIB_REQUIRED = $(foreach mlib,$(subst $(comma), ,$(TM_MULTILIB_CONFIG)),\
 SPECS = specs.install
 
 # temporary self_spec when building libraries (e.g. libgcc)
-lib_build_self_spec  = %<mfpu=* %<march=* -march=abi-default -mstrict-align
+gen_mlib_spec = $(if $(word 2,$1),\
+		%{$(firstword $1):$(patsubst %,-%,$(wordlist 2,$(words $1),$1))})
+
+# clean up the result of DRIVER_SELF_SPEC to avoid conflict
+lib_build_self_spec  = %<march=* %<mtune=* %<mcmodel=* %<mfpu=* %<mlsx %<mlasx
+
+# build libraries with -mstrict-align by default
+lib_build_self_spec += -mstrict-align
+
+# append user-specified build options from --with-multilib-list
 lib_build_self_spec += $(foreach mlib,$(subst $(comma), ,$(TM_MULTILIB_CONFIG)),\
-		       %{$(subst /,:-,$(mlib))})
+                       $(call gen_mlib_spec,$(subst /, ,$(mlib))))
 
 specs: specs.install
 	sed '/^*self_spec:$$/{ n;s/^$$/$(lib_build_self_spec)/g; }' $< > $@
 
+# Remove lib_build_self_specs before regression tests.
+.PHONY: remove-lib-specs
+check check-host check-target $(CHECK_TARGETS): remove-lib-specs
+remove-lib-specs:
+	-mv -f specs.install specs 2>/dev/null
+
 # Multiarch
 ifneq ($(call if_multiarch,yes),yes)
     # Define LA_DISABLE_MULTIARCH if multiarch is disabled.
-- 
2.31.1

