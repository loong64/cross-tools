From 52044a511f8bdcb0cb6b54b592cd96cc78f07254 Mon Sep 17 00:00:00 2001
From: Yang Yujie <yangyujie@loongson.cn>
Date: Wed, 20 Dec 2023 14:54:26 +0800
Subject: [PATCH 10/15] libsanitizer: enable tsan for loongarch64.

Change-Id: I4c06da2cc5325b5a65b95efab133972e4da7102e
---
 src/libsanitizer/configure.tgt               |   3 +-
 src/libsanitizer/tsan/Makefile.am            |   2 +-
 src/libsanitizer/tsan/Makefile.in            |   3 +-
 src/libsanitizer/tsan/tsan_interceptors.cc   |  11 +-
 src/libsanitizer/tsan/tsan_platform.h        |  36 ++++
 src/libsanitizer/tsan/tsan_platform_posix.cc |   2 +-
 src/libsanitizer/tsan/tsan_rtl.h             |   2 +-
 src/libsanitizer/tsan/tsan_rtl_loongarch64.S | 200 +++++++++++++++++++
 8 files changed, 251 insertions(+), 8 deletions(-)
 create mode 100644 src/libsanitizer/tsan/tsan_rtl_loongarch64.S

diff --git a/src/libsanitizer/configure.tgt b/src/libsanitizer/configure.tgt
index cd8cd40f3..7e1bccb1e 100644
--- a/src/libsanitizer/configure.tgt
+++ b/src/libsanitizer/configure.tgt
@@ -56,8 +56,9 @@ case "${target}" in
 	TSAN_SUPPORTED=no
 	;;
   loongarch64-*-linux*)
-        TSAN_SUPPORTED=no
+        TSAN_SUPPORTED=yes
         LSAN_SUPPORTED=yes
+	TSAN_TARGET_DEPENDENT_OBJECTS=tsan_rtl_loongarch64.lo
         ;;
   *)
 	UNSUPPORTED=1
diff --git a/src/libsanitizer/tsan/Makefile.am b/src/libsanitizer/tsan/Makefile.am
index 753cb8f4f..287d36883 100644
--- a/src/libsanitizer/tsan/Makefile.am
+++ b/src/libsanitizer/tsan/Makefile.am
@@ -50,7 +50,7 @@ tsan_files = \
 	tsan_sync.cc 
 
 libtsan_la_SOURCES = $(tsan_files)
-EXTRA_libtsan_la_SOURCES = tsan_rtl_amd64.S tsan_rtl_aarch64.S tsan_rtl_mips64.S tsan_rtl_ppc64.S
+EXTRA_libtsan_la_SOURCES = tsan_rtl_amd64.S tsan_rtl_aarch64.S tsan_rtl_mips64.S tsan_rtl_ppc64.S tsan_rtl_loongarch64.S
 libtsan_la_LIBADD = $(top_builddir)/sanitizer_common/libsanitizer_common.la $(top_builddir)/interception/libinterception.la $(TSAN_TARGET_DEPENDENT_OBJECTS)
 libtsan_la_DEPENDENCIES = $(top_builddir)/sanitizer_common/libsanitizer_common.la $(top_builddir)/interception/libinterception.la $(TSAN_TARGET_DEPENDENT_OBJECTS)
 if LIBBACKTRACE_SUPPORTED
diff --git a/src/libsanitizer/tsan/Makefile.in b/src/libsanitizer/tsan/Makefile.in
index 629056bf1..1095562c0 100644
--- a/src/libsanitizer/tsan/Makefile.in
+++ b/src/libsanitizer/tsan/Makefile.in
@@ -358,7 +358,7 @@ tsan_files = \
 	tsan_sync.cc 
 
 libtsan_la_SOURCES = $(tsan_files)
-EXTRA_libtsan_la_SOURCES = tsan_rtl_amd64.S tsan_rtl_aarch64.S tsan_rtl_mips64.S tsan_rtl_ppc64.S
+EXTRA_libtsan_la_SOURCES = tsan_rtl_amd64.S tsan_rtl_aarch64.S tsan_rtl_mips64.S tsan_rtl_ppc64.S tsan_rtl_loongarch64.S
 libtsan_la_LIBADD =  \
 	$(top_builddir)/sanitizer_common/libsanitizer_common.la \
 	$(top_builddir)/interception/libinterception.la \
@@ -511,6 +511,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tsan_rtl.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tsan_rtl_aarch64.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tsan_rtl_amd64.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tsan_rtl_loongarch64.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tsan_rtl_mips64.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tsan_rtl_mutex.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tsan_rtl_ppc64.Plo@am__quote@
diff --git a/src/libsanitizer/tsan/tsan_interceptors.cc b/src/libsanitizer/tsan/tsan_interceptors.cc
index 15f20d4b6..d86a3efcb 100644
--- a/src/libsanitizer/tsan/tsan_interceptors.cc
+++ b/src/libsanitizer/tsan/tsan_interceptors.cc
@@ -60,10 +60,14 @@ struct my_siginfo_t {
   u64 opaque[128 / sizeof(u64)];
 };
 
-#ifdef __mips__
+#if defined(__mips__)
 struct ucontext_t {
   u64 opaque[768 / sizeof(u64) + 1];
 };
+#elif SANITIZER_LOONGARCH64
+struct ucontext_t {
+  u64 opaque[1536 / sizeof(u64) + 1];
+};
 #else
 struct ucontext_t {
   // The size is determined by looking at sizeof of real ucontext_t on linux.
@@ -71,7 +75,8 @@ struct ucontext_t {
 };
 #endif
 
-#if defined(__x86_64__) || defined(__mips__) || SANITIZER_PPC64V1
+#if defined(__x86_64__) || defined(__mips__) \
+    || SANITIZER_PPC64V1 || SANITIZER_LOONGARCH64
 #define PTHREAD_ABI_BASE  "GLIBC_2.3.2"
 #elif defined(__aarch64__) || SANITIZER_PPC64V2
 #define PTHREAD_ABI_BASE  "GLIBC_2.17"
@@ -498,7 +503,7 @@ static void LongJmp(ThreadState *thr, uptr *env) {
 #elif defined(SANITIZER_LINUX)
 # ifdef __aarch64__
   uptr mangled_sp = env[13];
-# elif defined(__mips64)
+# elif defined(__mips64) || SANITIZER_LOONGARCH64
   uptr mangled_sp = env[1];
 # else
   uptr mangled_sp = env[6];
diff --git a/src/libsanitizer/tsan/tsan_platform.h b/src/libsanitizer/tsan/tsan_platform.h
index 44a3ea991..111ab2ec7 100644
--- a/src/libsanitizer/tsan/tsan_platform.h
+++ b/src/libsanitizer/tsan/tsan_platform.h
@@ -97,6 +97,42 @@ struct Mapping {
   static const uptr kVdsoBeg       = 0xfffff00000ull;
 };
 
+#define TSAN_MID_APP_RANGE 1
+#elif SANITIZER_LOONGARCH64
+/*
+C/C++ on linux/loongarch64 (old world)
+0100 0000 00 - 0200 0000 00: main binary
+0200 0000 00 - 1400 0000 00: -
+1400 0000 00 - 2400 0000 00: shadow
+2400 0000 00 - 3000 0000 00: -
+3000 0000 00 - 4000 0000 00: metainfo (memory blocks and sync objects)
+4000 0000 00 - 6000 0000 00: -
+6000 0000 00 - 6200 0000 00: traces
+6200 0000 00 - fe00 0000 00: -
+fe00 0000 00 - ff00 0000 00: heap
+ff00 0000 00 - ff80 0000 00: -
+ff80 0000 00 - ffff ffff ff: modules and main thread stack
+*/
+struct Mapping {
+  static const uptr kMetaShadowBeg = 0x4000000000ull;
+  static const uptr kMetaShadowEnd = 0x5000000000ull;
+  static const uptr kTraceMemBeg   = 0xb000000000ull;
+  static const uptr kTraceMemEnd   = 0xb200000000ull;
+  static const uptr kShadowBeg     = 0x2400000000ull;
+  static const uptr kShadowEnd     = 0x4000000000ull;
+  static const uptr kHeapMemBeg    = 0xfe00000000ull;
+  static const uptr kHeapMemEnd    = 0xff00000000ull;
+  static const uptr kLoAppMemBeg   = 0x0100000000ull;
+  static const uptr kLoAppMemEnd   = 0x0200000000ull;
+  static const uptr kMidAppMemBeg  = 0xaa00000000ull;
+  static const uptr kMidAppMemEnd  = 0xab00000000ull;
+  static const uptr kHiAppMemBeg   = 0xff80000000ull;
+  static const uptr kHiAppMemEnd   = 0xffffffffffull;
+  static const uptr kAppMemMsk     = 0xf800000000ull;
+  static const uptr kAppMemXor     = 0x0800000000ull;
+  static const uptr kVdsoBeg       = 0xfffff00000ull;
+};
+
 #define TSAN_MID_APP_RANGE 1
 #elif defined(__aarch64__) && defined(__APPLE__)
 /*
diff --git a/src/libsanitizer/tsan/tsan_platform_posix.cc b/src/libsanitizer/tsan/tsan_platform_posix.cc
index 6e62575f1..1f120f606 100644
--- a/src/libsanitizer/tsan/tsan_platform_posix.cc
+++ b/src/libsanitizer/tsan/tsan_platform_posix.cc
@@ -41,7 +41,7 @@ void InitializeShadowMemory() {
 #if defined(__x86_64__)
   const uptr kMadviseRangeBeg  = 0x7f0000000000ull;
   const uptr kMadviseRangeSize = 0x010000000000ull;
-#elif defined(__mips64)
+#elif defined(__mips64) || SANITIZER_LOONGARCH64
   const uptr kMadviseRangeBeg  = 0xff00000000ull;
   const uptr kMadviseRangeSize = 0x0100000000ull;
 #elif defined(__aarch64__) && defined(__APPLE__)
diff --git a/src/libsanitizer/tsan/tsan_rtl.h b/src/libsanitizer/tsan/tsan_rtl.h
index 7dd9779e4..ac1faced7 100644
--- a/src/libsanitizer/tsan/tsan_rtl.h
+++ b/src/libsanitizer/tsan/tsan_rtl.h
@@ -52,7 +52,7 @@ namespace __tsan {
 
 #if !SANITIZER_GO
 struct MapUnmapCallback;
-#if defined(__mips64) || defined(__aarch64__) || defined(__powerpc__)
+#if defined(__mips64) || defined(__aarch64__) || defined(__powerpc__) || SANITIZER_LOONGARCH64
 static const uptr kAllocatorRegionSizeLog = 20;
 static const uptr kAllocatorNumRegions =
     SANITIZER_MMAP_RANGE_SIZE >> kAllocatorRegionSizeLog;
diff --git a/src/libsanitizer/tsan/tsan_rtl_loongarch64.S b/src/libsanitizer/tsan/tsan_rtl_loongarch64.S
new file mode 100644
index 000000000..f27ec9484
--- /dev/null
+++ b/src/libsanitizer/tsan/tsan_rtl_loongarch64.S
@@ -0,0 +1,200 @@
+#include "sanitizer_common/sanitizer_asm.h"
+
+.section .text
+
+.hidden __tsan_setjmp
+.comm _ZN14__interception11real_setjmpE,8,8
+.globl setjmp
+.type setjmp, @function
+setjmp:
+  CFI_STARTPROC
+
+  // Save frame pointer and return address register
+  addi.d $sp, $sp, -32
+  st.d $ra, $sp, 24
+  st.d $fp, $sp, 16
+  CFI_DEF_CFA_OFFSET (32)
+  CFI_OFFSET (1, -8)
+  CFI_OFFSET (22, -16)
+
+  // Adjust the SP for previous frame
+  addi.d $fp, $sp, 32
+  CFI_DEF_CFA_REGISTER (22)
+
+  // Save env parameter
+  st.d $a0, $sp, 8
+  CFI_OFFSET (4, -24)
+
+  // Obtain SP, first argument to `void __tsan_setjmp(uptr sp)`
+  addi.d  $a0, $fp, 0
+
+  // call tsan interceptor
+  bl      __tsan_setjmp
+
+  // Restore env parameter
+  ld.d $a0, $sp, 8
+  CFI_RESTORE (4)
+
+  // Restore frame/link register
+  ld.d $fp, $sp, 16
+  ld.d $ra, $sp, 24
+  addi.d $sp, $sp, 32
+  CFI_RESTORE (22)
+  CFI_RESTORE (1)
+  CFI_DEF_CFA (3, 0)
+
+  // tail jump to libc setjmp
+  la.local $a1, _ZN14__interception11real_setjmpE
+  ld.d $a1, $a1, 0
+  jr $a1
+
+  CFI_ENDPROC
+
+.size setjmp, .-setjmp
+
+.comm _ZN14__interception12real__setjmpE,8,8
+.globl _setjmp
+.type _setjmp, @function
+_setjmp:
+  CFI_STARTPROC
+
+  // Save frame pointer and return address register
+  addi.d $sp, $sp, -32
+  st.d $ra, $sp, 24
+  st.d $fp, $sp, 16
+  CFI_DEF_CFA_OFFSET (32)
+  CFI_OFFSET (1, -8)
+  CFI_OFFSET (22, -16)
+
+  // Adjust the SP for previous frame
+  addi.d $fp, $sp, 32
+  CFI_DEF_CFA_REGISTER (22)
+
+  // Save env parameter
+  st.d $a0, $sp, 8
+  CFI_OFFSET (4, -24)
+
+  // Obtain SP, first argument to `void __tsan_setjmp(uptr sp)`
+  addi.d  $a0, $fp, 0
+
+  // call tsan interceptor
+  bl      __tsan_setjmp
+
+  // Restore env parameter
+  ld.d $a0, $sp, 8
+  CFI_RESTORE (4)
+
+  // Restore frame/link register
+  ld.d $fp, $sp, 16
+  ld.d $ra, $sp, 24
+  addi.d $sp, $sp, 32
+  CFI_RESTORE (22)
+  CFI_RESTORE (1)
+  CFI_DEF_CFA (3, 0)
+
+  // tail jump to libc setjmp
+  la.local $a1, _ZN14__interception12real__setjmpE
+  ld.d $a1, $a1, 0
+  jr $a1
+
+  CFI_ENDPROC
+
+.size _setjmp, .-_setjmp
+
+.comm _ZN14__interception14real_sigsetjmpE,8,8
+.globl sigsetjmp
+.type sigsetjmp, @function
+sigsetjmp:
+  CFI_STARTPROC
+
+  // Save frame pointer and return address register
+  addi.d $sp, $sp, -32
+  st.d $ra, $sp, 24
+  st.d $fp, $sp, 16
+  CFI_DEF_CFA_OFFSET (32)
+  CFI_OFFSET (1, -8)
+  CFI_OFFSET (22, -16)
+
+  // Adjust the SP for previous frame
+  addi.d $fp, $sp, 32
+  CFI_DEF_CFA_REGISTER (22)
+
+  // Save env parameter
+  st.d $a0, $sp, 8
+  CFI_OFFSET (4, -24)
+
+  // Obtain SP, first argument to `void __tsan_setjmp(uptr sp)`
+  addi.d  $a0, $fp, 0
+
+  // call tsan interceptor
+  bl      __tsan_setjmp
+
+  // Restore env parameter
+  ld.d $a0, $sp, 8
+  CFI_RESTORE (4)
+
+  // Restore frame/link register
+  ld.d $fp, $sp, 16
+  ld.d $ra, $sp, 24
+  addi.d $sp, $sp, 32
+  CFI_RESTORE (22)
+  CFI_RESTORE (1)
+  CFI_DEF_CFA (3, 0)
+
+  // tail jump to libc setjmp
+  la.local $a1, _ZN14__interception14real_sigsetjmpE
+  ld.d $a1, $a1, 0
+  jr $a1
+
+  CFI_ENDPROC
+
+.size sigsetjmp, .-sigsetjmp
+
+.comm _ZN14__interception16real___sigsetjmpE,8,8
+.globl __sigsetjmp
+.type __sigsetjmp, @function
+__sigsetjmp:
+  CFI_STARTPROC
+
+  // Save frame pointer and return address register
+  addi.d $sp, $sp, -32
+  st.d $ra, $sp, 24
+  st.d $fp, $sp, 16
+  CFI_DEF_CFA_OFFSET (32)
+  CFI_OFFSET (1, -8)
+  CFI_OFFSET (22, -16)
+
+  // Adjust the SP for previous frame
+  addi.d $fp, $sp, 32
+  CFI_DEF_CFA_REGISTER (22)
+
+  // Save env parameter
+  st.d $a0, $sp, 8
+  CFI_OFFSET (4, -24)
+
+  // Obtain SP, first argument to `void __tsan_setjmp(uptr sp)`
+  addi.d  $a0, $fp, 0
+
+  // call tsan interceptor
+  bl      __tsan_setjmp
+
+  // Restore env parameter
+  ld.d $a0, $sp, 8
+  CFI_RESTORE (4)
+
+  // Restore frame/link register
+  ld.d $fp, $sp, 16
+  ld.d $ra, $sp, 24
+  addi.d $sp, $sp, 32
+  CFI_RESTORE (22)
+  CFI_RESTORE (1)
+  CFI_DEF_CFA (3, 0)
+
+  // tail jump to libc setjmp
+  la.local $a1, _ZN14__interception16real___sigsetjmpE
+  ld.d $a1, $a1, 0
+  jr $a1
+
+  CFI_ENDPROC
+
+.size __sigsetjmp, .-__sigsetjmp
-- 
2.39.3

