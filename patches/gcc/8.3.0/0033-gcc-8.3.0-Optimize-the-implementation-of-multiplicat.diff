From 58c4ae91b33e7973911945b94832a205782d22df Mon Sep 17 00:00:00 2001
From: Lulu Cheng <chenglulu@loongson.cn>
Date: Tue, 27 Jun 2023 11:23:30 +0800
Subject: [PATCH 04/13] gcc-8.3.0: Optimize the implementation of
 multiplication operations.

Change-Id: I3b750d8afae266019dc63891e8273ab5c6971aaf
---
 src/gcc/config/loongarch/loongarch.md         | 41 ++++++++++---------
 src/gcc/testsuite/gcc.target/loongarch/mulh.c | 13 ++++++
 .../testsuite/gcc.target/loongarch/mulw_d.c   | 13 ++++++
 3 files changed, 48 insertions(+), 19 deletions(-)
 create mode 100644 src/gcc/testsuite/gcc.target/loongarch/mulh.c
 create mode 100644 src/gcc/testsuite/gcc.target/loongarch/mulw_d.c

diff --git a/src/gcc/config/loongarch/loongarch.md b/src/gcc/config/loongarch/loongarch.md
index 097c9f4db..6770f0b8f 100644
--- a/src/gcc/config/loongarch/loongarch.md
+++ b/src/gcc/config/loongarch/loongarch.md
@@ -699,15 +699,6 @@
   [(set_attr "type" "imul")
    (set_attr "mode" "<MODE>")])
 
-(define_insn "mulsidi3_64bit"
-  [(set (match_operand:DI 0 "register_operand" "=r")
-	(mult:DI (sign_extend:DI (match_operand:SI 1 "register_operand" "r"))
-		 (sign_extend:DI (match_operand:SI 2 "register_operand" "r"))))]
-  "TARGET_64BIT"
-  "mul.d\t%0,%1,%2"
-  [(set_attr "type" "imul")
-   (set_attr "mode" "DI")])
-
 (define_insn "*mulsi3_extended"
   [(set (match_operand:DI 0 "register_operand" "=r")
 	(sign_extend:DI
@@ -758,21 +749,33 @@
    (set_attr "mode" "DI")])
 
 (define_expand "<u>mulsidi3"
-  [(set (match_operand:DI 0 "register_operand" "=r")
+  [(set (match_operand:DI 0 "register_operand")
 	(mult:DI (any_extend:DI
-		   (match_operand:SI 1 "register_operand" " r"))
+		   (match_operand:SI 1 "register_operand"))
 		 (any_extend:DI
-		   (match_operand:SI 2 "register_operand" " r"))))]
-  "!TARGET_64BIT"
+		   (match_operand:SI 2 "register_operand"))))]
+  ""
 {
-  rtx temp = gen_reg_rtx (SImode);
-  emit_insn (gen_mulsi3 (temp, operands[1], operands[2]));
-  emit_insn (gen_<u>mulsi3_highpart (loongarch_subword (operands[0], true),
+  if (!TARGET_64BIT)
+    {
+      rtx temp = gen_reg_rtx (SImode);
+      emit_insn (gen_mulsi3 (temp, operands[1], operands[2]));
+      emit_insn (gen_<u>mulsi3_highpart (loongarch_subword (operands[0], true),
 				     operands[1], operands[2]));
-  emit_insn (gen_movsi (loongarch_subword (operands[0], false), temp));
-  DONE;
+      emit_insn (gen_movsi (loongarch_subword (operands[0], false), temp));
+      DONE;
+    }
 })
 
+(define_insn "<u>mulsidi3_64bit"
+  [(set (match_operand:DI 0 "register_operand" "=r")
+	(mult:DI (any_extend:DI (match_operand:SI 1 "register_operand" "r"))
+		 (any_extend:DI (match_operand:SI 2 "register_operand" "r"))))]
+  "TARGET_64BIT"
+  "mulw.d.w<u>\t%0,%1,%2"
+  [(set_attr "type" "imul")
+   (set_attr "mode" "DI")])
+
 (define_insn "<u>mulsi3_highpart"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(truncate:SI
@@ -782,7 +785,7 @@
 		     (any_extend:DI
 		       (match_operand:SI 2 "register_operand" " r")))
 	    (const_int 32))))]
-  "!TARGET_64BIT"
+  ""
   "mulh.w<u>\t%0,%1,%2"
   [(set_attr "type" "imul")
    (set_attr "mode" "SI")])
diff --git a/src/gcc/testsuite/gcc.target/loongarch/mulh.c b/src/gcc/testsuite/gcc.target/loongarch/mulh.c
new file mode 100644
index 000000000..bef35828d
--- /dev/null
+++ b/src/gcc/testsuite/gcc.target/loongarch/mulh.c
@@ -0,0 +1,13 @@
+/* { dg-do compile } */
+/* { dg-options "-O2" } */
+/* { dg-final { scan-assembler "mulh.wu" } } */
+
+typedef unsigned int DI __attribute__((mode(DI)));
+typedef unsigned int SI __attribute__((mode(SI)));
+
+SI
+f (SI x, SI y)
+{
+  return ((DI) x * y) >> 32;
+}
+
diff --git a/src/gcc/testsuite/gcc.target/loongarch/mulw_d.c b/src/gcc/testsuite/gcc.target/loongarch/mulw_d.c
new file mode 100644
index 000000000..db8c0d867
--- /dev/null
+++ b/src/gcc/testsuite/gcc.target/loongarch/mulw_d.c
@@ -0,0 +1,13 @@
+/* { dg-do compile } */
+/* { dg-options "-O2" } */
+/* { dg-final { scan-assembler "mulw.d.wu" } } */
+
+typedef unsigned int DI __attribute__((mode(DI)));
+typedef unsigned int SI __attribute__((mode(SI)));
+
+DI
+f (SI x, SI y)
+{
+  return (DI) x * y;
+}
+
-- 
2.31.1

