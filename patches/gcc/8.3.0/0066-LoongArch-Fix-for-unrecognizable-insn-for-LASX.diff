From 61f7271c6cfde9cabac32977061a75d911de4047 Mon Sep 17 00:00:00 2001
From: Lulu Cheng <chenglulu@loongson.cn>
Date: Sat, 16 Nov 2024 10:53:28 +0800
Subject: [PATCH v1 1/2] LoongArch: Fix for unrecognizable insn for LASX.

test.cc:110:1: error: unrecognizable insn:
  110 | }
      | ^
(insn 61 60 62 2 (set (reg:V4DF 139 [ r_$f64_33 ])
        (vec_merge:V4DF (vec_duplicate:V4DF (const_double:DF 0.0 [0x0.0p+0]))
            (reg:V4DF 139 [ r_$f64_33 ])
            (const_int 2 [0x2]))) "test.cc":44:13 -1
     (nil))

        PR target/117575

gcc/ChangeLog:

        * config/loongarch/lasx.md: Modify the constraint of operands[1]
        from reg_or_0_opperand to register_operand.

gcc/testsuite/ChangeLog:

        * g++.target/loongarch/pr117575.C: New test.

Change-Id: I740f43a7a21cdd21b3dee5fb19d12776c111df99
---
 src/gcc/config/loongarch/lasx.md              |  2 +-
 .../testsuite/g++.target/loongarch/pr117575.C | 81 +++++++++++++++++++
 2 files changed, 82 insertions(+), 1 deletion(-)
 create mode 100644 src/gcc/testsuite/g++.target/loongarch/pr117575.C

diff --git a/src/gcc/config/loongarch/lasx.md b/src/gcc/config/loongarch/lasx.md
index 908e56112..f22d0e37a 100644
--- a/src/gcc/config/loongarch/lasx.md
+++ b/src/gcc/config/loongarch/lasx.md
@@ -776,7 +776,7 @@
 
 (define_expand "vec_set<mode>"
   [(match_operand:FLASX 0 "register_operand")
-   (match_operand:<UNITMODE> 1 "reg_or_0_operand")
+   (match_operand:<UNITMODE> 1 "register_operand")
    (match_operand 2 "const_<indeximm256>_operand")]
   "ISA_HAS_LASX"
 {
diff --git a/src/gcc/testsuite/g++.target/loongarch/pr117575.C b/src/gcc/testsuite/g++.target/loongarch/pr117575.C
new file mode 100644
index 000000000..d02d74191
--- /dev/null
+++ b/src/gcc/testsuite/g++.target/loongarch/pr117575.C
@@ -0,0 +1,81 @@
+/* { dg-do preprocess } */
+/* { dg-options "-mabi=lp64d -mlasx -O3" } */
+
+typedef long unsigned int size_t;
+typedef unsigned char simde__mmask8;
+typedef double simde_float64;
+typedef simde_float64 simde__m512d __attribute__ ((__aligned__ ((64))))
+__attribute__ ((__vector_size__ (64))) __attribute__ ((__may_alias__));
+typedef simde_float64 simde__m256d __attribute__ ((__aligned__ ((32))))
+__attribute__ ((__vector_size__ (32))) __attribute__ ((__may_alias__));
+simde__m512d simde_mm512_set_pd (simde_float64 e7, simde_float64 e6,
+                                 simde_float64 e5, simde_float64 e4,
+                                 simde_float64 e3, simde_float64 e2,
+                                 simde_float64 e1, simde_float64 e0);
+simde__m256d simde_mm256_maskz_mov_pd (simde__mmask8 k, simde__m256d a);
+int simde_test_x86_assert_equal_f64x4_ (simde__m256d a, simde__m256d b);
+
+typedef union
+{
+
+  __attribute__ ((__aligned__ ((32)))) simde_float64 f64
+      __attribute__ ((__vector_size__ (32))) __attribute__ ((__may_alias__));
+} simde__m256d_private;
+__attribute__ ((__always_inline__)) inline static simde__m256d
+simde__m256d_from_private (simde__m256d_private v)
+{
+  simde__m256d r;
+  __builtin_memcpy (&r, &v, sizeof (r));
+  return r;
+}
+simde__m256d
+simde_mm256_set_pd (simde_float64 e3, simde_float64 e2, simde_float64 e1,
+                    simde_float64 e0)
+{
+
+  simde__m256d_private r_;
+
+  r_.f64[0] = e0;
+  r_.f64[1] = e1;
+  r_.f64[2] = e2;
+  r_.f64[3] = e3;
+
+  return simde__m256d_from_private (r_);
+}
+
+simde__m256d simde_mm512_extractf64x4_pd (simde__m512d a, int imm8);
+int
+test_simde_mm512_maskz_extractf64x4_pd (void)
+{
+  const struct
+  {
+    simde__mmask8 k;
+    simde__m512d a;
+    simde__m256d r0;
+    simde__m256d r1;
+  } test_vec[2] = {
+    { 21,
+      simde_mm512_set_pd (-139.11, -172.36, -268.86, 393.53, -71.72, 36.69,
+                          98.47, -135.52),
+      simde_mm256_set_pd (0.00, 36.69, 0.00, -135.52),
+      simde_mm256_set_pd (0.00, -172.36, 0.00, 393.53) },
+    { 150,
+      simde_mm512_set_pd (-556.90, 522.06, 160.98, -932.28, 391.82, 600.12,
+                          -569.99, -491.12),
+      simde_mm256_set_pd (0.00, 600.12, -569.99, 0.00),
+      simde_mm256_set_pd (0.00, 522.06, 160.98, 0.00) },
+  };
+
+  for (size_t i = 0; i < (sizeof (test_vec) / sizeof (test_vec[0])); i++)
+    {
+      simde__m256d r;
+      r = simde_mm256_maskz_mov_pd (
+          test_vec[i].k, simde_mm512_extractf64x4_pd (test_vec[i].a, 0));
+      if (simde_test_x86_assert_equal_f64x4_ (r, test_vec[i].r0))
+        {
+          return 1;
+        }
+    }
+
+  return 0;
+}
-- 
2.20.1

