From 3828b7f2c3aabb33db95277aa6505bdab1562d28 Mon Sep 17 00:00:00 2001
From: Guo Jie <guojie@loongson.cn>
Date: Fri, 22 Sep 2023 11:02:30 +0800
Subject: [PATCH 13/13] Modify MOVE_RATIO + 1, using 4 consecutive scalar
 ld.d/st.d instead of xvld/xvst to implement 32B BLK move. Especially
 effective for SPEC2017 538.

Change-Id: I8cb2b18b7b57afd11ac16f4702aaa48d10e15c63
---
 src/gcc/config/loongarch/loongarch.h          |  2 +-
 .../gcc.target/loongarch/blk-move-opt.c       | 24 +++++++++++++++++++
 2 files changed, 25 insertions(+), 1 deletion(-)
 create mode 100644 src/gcc/testsuite/gcc.target/loongarch/blk-move-opt.c

diff --git a/src/gcc/config/loongarch/loongarch.h b/src/gcc/config/loongarch/loongarch.h
index 1b26230cb..2f3117fd0 100644
--- a/src/gcc/config/loongarch/loongarch.h
+++ b/src/gcc/config/loongarch/loongarch.h
@@ -1215,7 +1215,7 @@ typedef struct {
 
 #define MOVE_RATIO(speed) \
   (HAVE_movmemsi \
-   ? LARCH_MAX_MOVE_BYTES_PER_LOOP_ITER / UNITS_PER_WORD \
+   ? LARCH_MAX_MOVE_BYTES_PER_LOOP_ITER / UNITS_PER_WORD + 1 \
    : CLEAR_RATIO (speed) / 2)
 
 /* For CLEAR_RATIO, when optimizing for size, give a better estimate
diff --git a/src/gcc/testsuite/gcc.target/loongarch/blk-move-opt.c b/src/gcc/testsuite/gcc.target/loongarch/blk-move-opt.c
new file mode 100644
index 000000000..592c3c921
--- /dev/null
+++ b/src/gcc/testsuite/gcc.target/loongarch/blk-move-opt.c
@@ -0,0 +1,24 @@
+/* Considering vector alignment memory access, use 4 consecutive scalar
+   ld.d/st.d instead of xvld/xvst to implement 32B BLK move.
+   Especially effective for SPEC2017 538.  */
+/* { dg-do compile } */
+/* { dg-options "-O3 -mlasx" } */
+/* { dg-final { scan-assembler-not "xvld" } } */
+/* { dg-final { scan-assembler-not "xvst" } } */
+
+typedef struct _SA
+{
+  long a;
+  long b;
+  long c;
+  long d;
+} SA;
+
+extern SA aa;
+extern SA foo (SA);
+
+void
+test (SA s)
+{
+  foo (s);
+}
-- 
2.31.1

