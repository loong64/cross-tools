From a40aa559991670614b77286b1751bf368b2c8c77 Mon Sep 17 00:00:00 2001
From: caiyinyu <caiyinyu@loongson.cn>
Date: Tue, 19 Mar 2024 16:27:20 +0800
Subject: [PATCH v1 2/2] =?UTF-8?q?Fix=20gmp-6.3.0/mpfr-4.2.1=20build=20err?=
 =?UTF-8?q?or:=20unknown=20type=20name=20=E2=80=98=5F=5Fint128=5F=5F?=
 =?UTF-8?q?=E2=80=99.?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

From 5e5803060c3d6db3ff73195db798ffd8e5588e78 Mon Sep 17 00:00:00 2001
From: Jozef Lawrynowicz <jozef.l@mittosystems.com>
Date: Tue, 25 Jun 2019 09:41:17 +0000
Subject: [PATCH] Implement alternate "__intN__" form of "__intN" type

gcc/ChangeLog:

        * gcc/c-family/c-common.c (c_common_nodes_and_builtins): Define
        alternate "__intN__" name for "__intN" types.
        * gcc/c/c-parser.c (c_parse_init): Create keyword for "__intN__" type.
        * gcc/cp/lex.c (init_reswords): Likewise.
        * gcc/config/msp430/msp430.h: Use __int20__ for SIZE_TYPE and
        PTRDIFF_TYPE.
        * gcc/cp/cp-tree.h (cp_decl_specifier_seq): New bitfield "int_n_alt".
        * gcc/c/c-decl.c (declspecs_add_type): Don't pedwarn about "__intN" ISO
        C incompatibility if alternate "__intN__" form is used.
        * gcc/cp/decl.c (grokdeclarator): Likewise.
        * gcc/cp/parser.c (cp_parser_simple_type_specifier): Set
        decl_specs->int_n_alt if "__intN__" form is used.
        * gcc/gimple-ssa-sprintf.c (build_intmax_type_nodes): Accept "__intN__"
        format of "__intN" types for UINTMAX_TYPE.
        * gcc/brig/brig-lang.c (brig_build_c_type_nodes): Accept "__intN__"
        format of "__intN" types for SIZE_TYPE.
        * gcc/lto/lto-lang.c (lto_build_c_type_nodes): Likewise.
        * gcc/stor-layout.c (initialize_sizetypes): Accept "__intN__"
        format of "__intN" types for SIZETYPE.
        * gcc/tree.c (build_common_tree_nodes): Accept "__intN__"
        format of "__intN" types for SIZE_TYPE and PTRDIFF_TYPE.
        * gcc/doc/invoke.texi: Document that __intN__ disables pedantic
        warnings.

gcc/testsuite/ChangeLog:

        * gcc.target/msp430/mlarge-pedwarns.c: New test.

Change-Id: I27a0b77bed94e4b3247eb478374ec4791dce1c69
---
 src/gcc/ChangeLog                             | 26 +++++++++++++++++++
 src/gcc/brig/brig-lang.c                      |  6 +++--
 src/gcc/c-family/c-common.c                   |  6 +++++
 src/gcc/c/c-decl.c                            |  6 ++++-
 src/gcc/c/c-parser.c                          |  5 ++++
 src/gcc/config/msp430/msp430.h                |  6 +++--
 src/gcc/cp/cp-tree.h                          |  3 +++
 src/gcc/cp/decl.c                             |  6 ++++-
 src/gcc/cp/lex.c                              |  5 ++++
 src/gcc/cp/parser.c                           |  6 +++++
 src/gcc/gimple-ssa-sprintf.c                  |  6 +++--
 src/gcc/lto/lto-lang.c                        |  6 +++--
 src/gcc/stor-layout.c                         |  6 +++--
 src/gcc/testsuite/ChangeLog                   |  4 +++
 .../gcc.target/msp430/mlarge-pedwarns.c       | 11 ++++++++
 src/gcc/tree.c                                | 13 +++++++---
 16 files changed, 105 insertions(+), 16 deletions(-)
 create mode 100644 src/gcc/testsuite/gcc.target/msp430/mlarge-pedwarns.c

diff --git a/src/gcc/ChangeLog b/src/gcc/ChangeLog
index 592c1961f..732541ebe 100644
--- a/src/gcc/ChangeLog
+++ b/src/gcc/ChangeLog
@@ -1,3 +1,29 @@
+2019-06-25  Jozef Lawrynowicz  <jozef.l@mittosystems.com>
+
+	* gcc/c-family/c-common.c (c_common_nodes_and_builtins): Define
+	alternate "__intN__" name for "__intN" types.
+	* gcc/c/c-parser.c (c_parse_init): Create keyword for "__intN__" type.
+	* gcc/cp/lex.c (init_reswords): Likewise.
+	* gcc/config/msp430/msp430.h: Use __int20__ for SIZE_TYPE and
+	PTRDIFF_TYPE.
+	* gcc/cp/cp-tree.h (cp_decl_specifier_seq): New bitfield "int_n_alt".
+	* gcc/c/c-decl.c (declspecs_add_type): Don't pedwarn about "__intN" ISO
+	C incompatibility if alternate "__intN__" form is used.
+	* gcc/cp/decl.c (grokdeclarator): Likewise.
+	* gcc/cp/parser.c (cp_parser_simple_type_specifier): Set
+	decl_specs->int_n_alt if "__intN__" form is used.
+	* gcc/gimple-ssa-sprintf.c (build_intmax_type_nodes): Accept "__intN__"
+	format of "__intN" types for UINTMAX_TYPE.
+	* gcc/brig/brig-lang.c (brig_build_c_type_nodes): Accept "__intN__"
+	format of "__intN" types for SIZE_TYPE.
+	* gcc/lto/lto-lang.c (lto_build_c_type_nodes): Likewise.
+	* gcc/stor-layout.c (initialize_sizetypes): Accept "__intN__"
+	format of "__intN" types for SIZETYPE.
+	* gcc/tree.c (build_common_tree_nodes): Accept "__intN__"
+	format of "__intN" types for SIZE_TYPE and PTRDIFF_TYPE.
+	* gcc/doc/invoke.texi: Document that __intN__ disables pedantic
+	warnings.
+
 2019-04-04  Martin Sebor  <msebor@redhat.com>
 
 	PR middle-end/89934
diff --git a/src/gcc/brig/brig-lang.c b/src/gcc/brig/brig-lang.c
index 997dad419..604107623 100644
--- a/src/gcc/brig/brig-lang.c
+++ b/src/gcc/brig/brig-lang.c
@@ -860,10 +860,12 @@ brig_build_c_type_nodes (void)
       for (i = 0; i < NUM_INT_N_ENTS; i++)
 	if (int_n_enabled_p[i])
 	  {
-	    char name[50];
+	    char name[50], altname[50];
 	    sprintf (name, "__int%d unsigned", int_n_data[i].bitsize);
+	    sprintf (altname, "__int%d__ unsigned", int_n_data[i].bitsize);
 
-	    if (strcmp (name, SIZE_TYPE) == 0)
+	    if (strcmp (name, SIZE_TYPE) == 0
+		|| strcmp (altname, SIZE_TYPE) == 0)
 	      {
 		intmax_type_node = int_n_trees[i].signed_type;
 		uintmax_type_node = int_n_trees[i].unsigned_type;
diff --git a/src/gcc/c-family/c-common.c b/src/gcc/c-family/c-common.c
index dbbaa8195..143da41e7 100644
--- a/src/gcc/c-family/c-common.c
+++ b/src/gcc/c-family/c-common.c
@@ -3979,8 +3979,14 @@ c_common_nodes_and_builtins (void)
       sprintf (name, "__int%d", int_n_data[i].bitsize);
       record_builtin_type ((enum rid)(RID_FIRST_INT_N + i), name,
 			   int_n_trees[i].signed_type);
+      sprintf (name, "__int%d__", int_n_data[i].bitsize);
+      record_builtin_type ((enum rid)(RID_FIRST_INT_N + i), name,
+			   int_n_trees[i].signed_type);
+
       sprintf (name, "__int%d unsigned", int_n_data[i].bitsize);
       record_builtin_type (RID_MAX, name, int_n_trees[i].unsigned_type);
+      sprintf (name, "__int%d__ unsigned", int_n_data[i].bitsize);
+      record_builtin_type (RID_MAX, name, int_n_trees[i].unsigned_type);
     }
 
   if (c_dialect_cxx ())
diff --git a/src/gcc/c/c-decl.c b/src/gcc/c/c-decl.c
index 4da9fe994..94d0a6842 100644
--- a/src/gcc/c/c-decl.c
+++ b/src/gcc/c/c-decl.c
@@ -10435,7 +10435,11 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,
 	    case RID_INT_N_2:
 	    case RID_INT_N_3:
 	      specs->int_n_idx = i - RID_INT_N_0;
-	      if (!in_system_header_at (input_location))
+	      if (!in_system_header_at (input_location)
+		  /* If the INT_N type ends in "__", and so is of the format
+		     "__intN__", don't pedwarn.  */
+		  && (strncmp (IDENTIFIER_POINTER (type)
+			       + (IDENTIFIER_LENGTH (type) - 2), "__", 2) != 0))
 		pedwarn (loc, OPT_Wpedantic,
 			 "ISO C does not support %<__int%d%> types",
 			 int_n_data[specs->int_n_idx].bitsize);
diff --git a/src/gcc/c/c-parser.c b/src/gcc/c/c-parser.c
index ece6b9202..c41620349 100644
--- a/src/gcc/c/c-parser.c
+++ b/src/gcc/c/c-parser.c
@@ -156,6 +156,11 @@ c_parse_init (void)
       id = get_identifier (name);
       C_SET_RID_CODE (id, RID_FIRST_INT_N + i);
       C_IS_RESERVED_WORD (id) = 1;
+
+      sprintf (name, "__int%d__", int_n_data[i].bitsize);
+      id = get_identifier (name);
+      C_SET_RID_CODE (id, RID_FIRST_INT_N + i);
+      C_IS_RESERVED_WORD (id) = 1;
     }
 }
 
diff --git a/src/gcc/config/msp430/msp430.h b/src/gcc/config/msp430/msp430.h
index 6bfe28c2f..e3a41eb04 100644
--- a/src/gcc/config/msp430/msp430.h
+++ b/src/gcc/config/msp430/msp430.h
@@ -180,9 +180,11 @@ extern const char * msp430_select_hwmult_lib (int, const char **);
 /* Layout of Source Language Data Types */
 
 #undef  SIZE_TYPE
-#define SIZE_TYPE			(TARGET_LARGE ? "__int20 unsigned" : "unsigned int")
+#define SIZE_TYPE			(TARGET_LARGE \
+					 ? "__int20__ unsigned" \
+					 : "unsigned int")
 #undef  PTRDIFF_TYPE
-#define PTRDIFF_TYPE			(TARGET_LARGE ? "__int20" : "int")
+#define PTRDIFF_TYPE			(TARGET_LARGE ? "__int20__" : "int")
 #undef  WCHAR_TYPE
 #define WCHAR_TYPE			"long int"
 #undef  WCHAR_TYPE_SIZE
diff --git a/src/gcc/cp/cp-tree.h b/src/gcc/cp/cp-tree.h
index 0f24b4fc9..e06d5bc2e 100644
--- a/src/gcc/cp/cp-tree.h
+++ b/src/gcc/cp/cp-tree.h
@@ -5760,6 +5760,9 @@ struct cp_decl_specifier_seq {
   BOOL_BITFIELD gnu_thread_keyword_p : 1;
   /* True iff the type is a decltype.  */
   BOOL_BITFIELD decltype_p : 1;
+  /* True iff the alternate "__intN__" form of the __intN type has been
+     used.  */
+  BOOL_BITFIELD int_n_alt: 1;
 };
 
 /* The various kinds of declarators.  */
diff --git a/src/gcc/cp/decl.c b/src/gcc/cp/decl.c
index f6af3f9f5..c11510275 100644
--- a/src/gcc/cp/decl.c
+++ b/src/gcc/cp/decl.c
@@ -10147,6 +10147,7 @@ grokdeclarator (const cp_declarator *declarator,
   tree type = NULL_TREE;
   int longlong = 0;
   int explicit_intN = 0;
+  int int_n_alt = 0;
   int virtualp, explicitp, friendp, inlinep, staticp;
   int explicit_int = 0;
   int explicit_char = 0;
@@ -10220,6 +10221,7 @@ grokdeclarator (const cp_declarator *declarator,
   long_p = decl_spec_seq_has_spec_p (declspecs, ds_long);
   longlong = decl_spec_seq_has_spec_p (declspecs, ds_long_long);
   explicit_intN = declspecs->explicit_intN_p;
+  int_n_alt = declspecs->int_n_alt;
   thread_p = decl_spec_seq_has_spec_p (declspecs, ds_thread);
 
   // Was concept_p specified? Note that ds_concept
@@ -10620,7 +10622,9 @@ grokdeclarator (const cp_declarator *declarator,
 		 int_n_data[declspecs->int_n_idx].bitsize);
 	  explicit_intN = false;
 	}
-      else if (pedantic && ! in_system_header_at (input_location))
+      /* Don't pedwarn if the alternate "__intN__" form has been used instead
+	 of "__intN".  */
+      else if (!int_n_alt && pedantic && ! in_system_header_at (input_location))
 	pedwarn (input_location, OPT_Wpedantic,
 		 "ISO C++ does not support %<__int%d%> for %qs",
 		 int_n_data[declspecs->int_n_idx].bitsize, name);
diff --git a/src/gcc/cp/lex.c b/src/gcc/cp/lex.c
index 4d30eb5c8..d5ee63ecc 100644
--- a/src/gcc/cp/lex.c
+++ b/src/gcc/cp/lex.c
@@ -256,6 +256,11 @@ init_reswords (void)
       id = get_identifier (name);
       C_SET_RID_CODE (id, RID_FIRST_INT_N + i);
       set_identifier_kind (id, cik_keyword);
+
+      sprintf (name, "__int%d__", int_n_data[i].bitsize);
+      id = get_identifier (name);
+      C_SET_RID_CODE (id, RID_FIRST_INT_N + i);
+      set_identifier_kind (id, cik_keyword);
     }
 }
 
diff --git a/src/gcc/cp/parser.c b/src/gcc/cp/parser.c
index e479ed96d..dacf6d76d 100644
--- a/src/gcc/cp/parser.c
+++ b/src/gcc/cp/parser.c
@@ -16974,6 +16974,12 @@ cp_parser_simple_type_specifier (cp_parser* parser,
 	{
 	  decl_specs->explicit_intN_p = true;
 	  decl_specs->int_n_idx = idx;
+	  /* Check if the alternate "__intN__" form has been used instead of
+	     "__intN".  */
+	  if (strncmp (IDENTIFIER_POINTER (token->u.value)
+			+ (IDENTIFIER_LENGTH (token->u.value) - 2),
+			"__", 2) == 0)
+	    decl_specs->int_n_alt = true;
 	}
       type = int_n_trees [idx].signed_type;
       break;
diff --git a/src/gcc/gimple-ssa-sprintf.c b/src/gcc/gimple-ssa-sprintf.c
index 5cc4133ab..a95abdd78 100644
--- a/src/gcc/gimple-ssa-sprintf.c
+++ b/src/gcc/gimple-ssa-sprintf.c
@@ -1111,10 +1111,12 @@ build_intmax_type_nodes (tree *pintmax, tree *puintmax)
       for (int i = 0; i < NUM_INT_N_ENTS; i++)
 	if (int_n_enabled_p[i])
 	  {
-	    char name[50];
+	    char name[50], altname[50];
 	    sprintf (name, "__int%d unsigned", int_n_data[i].bitsize);
+	    sprintf (altname, "__int%d__ unsigned", int_n_data[i].bitsize);
 
-	    if (strcmp (name, UINTMAX_TYPE) == 0)
+	    if (strcmp (name, UINTMAX_TYPE) == 0
+		|| strcmp (altname, UINTMAX_TYPE) == 0)
 	      {
 	        *pintmax = int_n_trees[i].signed_type;
 	        *puintmax = int_n_trees[i].unsigned_type;
diff --git a/src/gcc/lto/lto-lang.c b/src/gcc/lto/lto-lang.c
index a310d699a..859c307af 100644
--- a/src/gcc/lto/lto-lang.c
+++ b/src/gcc/lto/lto-lang.c
@@ -1240,10 +1240,12 @@ lto_build_c_type_nodes (void)
       for (i = 0; i < NUM_INT_N_ENTS; i++)
 	if (int_n_enabled_p[i])
 	  {
-	    char name[50];
+	    char name[50], altname[50];
 	    sprintf (name, "__int%d unsigned", int_n_data[i].bitsize);
+	    sprintf (altname, "__int%d__ unsigned", int_n_data[i].bitsize);
 
-	    if (strcmp (name, SIZE_TYPE) == 0)
+	    if (strcmp (name, SIZE_TYPE) == 0
+		|| strcmp (altname, SIZE_TYPE) == 0)
 	      {
 		intmax_type_node = int_n_trees[i].signed_type;
 		uintmax_type_node = int_n_trees[i].unsigned_type;
diff --git a/src/gcc/stor-layout.c b/src/gcc/stor-layout.c
index d06e88a81..58d96e199 100644
--- a/src/gcc/stor-layout.c
+++ b/src/gcc/stor-layout.c
@@ -2705,10 +2705,12 @@ initialize_sizetypes (void)
       for (i = 0; i < NUM_INT_N_ENTS; i++)
 	if (int_n_enabled_p[i])
 	  {
-	    char name[50];
+	    char name[50], altname[50];
 	    sprintf (name, "__int%d unsigned", int_n_data[i].bitsize);
+	    sprintf (altname, "__int%d__ unsigned", int_n_data[i].bitsize);
 
-	    if (strcmp (name, SIZETYPE) == 0)
+	    if (strcmp (name, SIZETYPE) == 0
+		|| strcmp (altname, SIZETYPE) == 0)
 	      {
 		precision = int_n_data[i].bitsize;
 	      }
diff --git a/src/gcc/testsuite/ChangeLog b/src/gcc/testsuite/ChangeLog
index 9cdc3993b..54adbc218 100644
--- a/src/gcc/testsuite/ChangeLog
+++ b/src/gcc/testsuite/ChangeLog
@@ -1,3 +1,7 @@
+2019-06-25  Jozef Lawrynowicz  <jozef.l@mittosystems.com>
+
+	* gcc.target/msp430/mlarge-pedwarns.c: New test.
+
 2019-04-04  Martin Sebor  <msebor@redhat.com>
 
 	PR middle-end/89934
diff --git a/src/gcc/testsuite/gcc.target/msp430/mlarge-pedwarns.c b/src/gcc/testsuite/gcc.target/msp430/mlarge-pedwarns.c
new file mode 100644
index 000000000..a16f53342
--- /dev/null
+++ b/src/gcc/testsuite/gcc.target/msp430/mlarge-pedwarns.c
@@ -0,0 +1,11 @@
+/* { dg-do compile } */
+/* { dg-skip-if "" { "*-*-*" } { "-mcpu=msp430" } { "" } } */
+/* { dg-options "-mlarge -pedantic-errors" } */
+
+/* Ensure the use of builtin macros that contain __int20__ in their
+   expansion don't cause ISO C errors when -pedantic-errors is passed.  */
+
+__SIZE_TYPE__ a;
+__INTPTR_TYPE__ b;
+__UINTPTR_TYPE__ c;
+__PTRDIFF_TYPE__ d;
diff --git a/src/gcc/tree.c b/src/gcc/tree.c
index 091a63a1a..05ff4f3db 100644
--- a/src/gcc/tree.c
+++ b/src/gcc/tree.c
@@ -9822,10 +9822,12 @@ build_common_tree_nodes (bool signed_char)
       for (i = 0; i < NUM_INT_N_ENTS; i++)
 	if (int_n_enabled_p[i])
 	  {
-	    char name[50];
+	    char name[50], altname[50];
 	    sprintf (name, "__int%d unsigned", int_n_data[i].bitsize);
+	    sprintf (altname, "__int%d__ unsigned", int_n_data[i].bitsize);
 
-	    if (strcmp (name, SIZE_TYPE) == 0)
+	    if (strcmp (name, SIZE_TYPE) == 0
+		|| strcmp (altname, SIZE_TYPE) == 0)
 	      {
 		size_type_node = int_n_trees[i].unsigned_type;
 	      }
@@ -9849,9 +9851,12 @@ build_common_tree_nodes (bool signed_char)
       for (int i = 0; i < NUM_INT_N_ENTS; i++)
 	if (int_n_enabled_p[i])
 	  {
-	    char name[50];
+	    char name[50], altname[50];
 	    sprintf (name, "__int%d", int_n_data[i].bitsize);
-	    if (strcmp (name, PTRDIFF_TYPE) == 0)
+	    sprintf (altname, "__int%d__", int_n_data[i].bitsize);
+
+	    if (strcmp (name, PTRDIFF_TYPE) == 0
+		|| strcmp (altname, PTRDIFF_TYPE) == 0)
 	      ptrdiff_type_node = int_n_trees[i].signed_type;
 	  }
       if (ptrdiff_type_node == NULL_TREE)
-- 
2.20.1

