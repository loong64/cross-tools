From cdcf04b1e54ea2457c6189751bdb512a84177ee2 Mon Sep 17 00:00:00 2001
From: Jiahao Xu <xujiahao@loongson.cn>
Date: Mon, 3 Jul 2023 16:00:13 +0800
Subject: [PATCH 07/13] gcc-8.3.0: Optimize float vector unpack operation.

Change-Id: I0f799fbbb816169a8362b10d4ff02c243f915496
---
 src/gcc/config/loongarch/lasx.md              | 49 +++++++++----------
 src/gcc/config/loongarch/loongarch-protos.h   |  2 +-
 src/gcc/config/loongarch/loongarch.c          | 34 ++++++-------
 src/gcc/config/loongarch/lsx.md               | 30 +++++-------
 .../gcc.target/loongarch/vec-unpack.c         | 18 +++++++
 5 files changed, 68 insertions(+), 65 deletions(-)
 create mode 100644 src/gcc/testsuite/gcc.target/loongarch/vec-unpack.c

diff --git a/src/gcc/config/loongarch/lasx.md b/src/gcc/config/loongarch/lasx.md
index 01a21bd6c..6f191194d 100644
--- a/src/gcc/config/loongarch/lasx.md
+++ b/src/gcc/config/loongarch/lasx.md
@@ -547,10 +547,12 @@
 	(float_extend:V4DF
 	  (vec_select:V4SF
 	    (match_operand:V8SF 1 "register_operand" "f")
-	    (match_dup 2))))]
+	    (parallel [(const_int 4) (const_int 5)
+                   (const_int 6) (const_int 7)]))))]
   "ISA_HAS_LASX"
 {
-  operands[2] = loongarch_lsx_vec_parallel_const_half (V8SFmode, true/*high_p*/);
+  loongarch_expand_fp_vec_unpack(operands, true/*high_p*/);
+  DONE;
 })
 
 (define_expand "vec_unpacks_lo_v8sf"
@@ -558,10 +560,12 @@
 	(float_extend:V4DF
 	  (vec_select:V4SF
 	    (match_operand:V8SF 1 "register_operand" "f")
-	    (match_dup 2))))]
+	    (parallel [(const_int 0) (const_int 1)
+                   (const_int 2) (const_int 3)]))))]
   "ISA_HAS_LASX"
 {
-  operands[2] = loongarch_lsx_vec_parallel_const_half (V8SFmode, false/*high_p*/);
+  loongarch_expand_fp_vec_unpack(operands, false/*high_p*/);
+  DONE;
 })
 
 (define_expand "vec_unpacks_hi_<mode>"
@@ -2696,12 +2700,16 @@
 ;; Define for builtin function.
 (define_insn "lasx_xvfcvth_d_s"
   [(set (match_operand:V4DF 0 "register_operand" "=f")
-	(unspec:V4DF [(match_operand:V8SF 1 "register_operand" "f")]
-		     UNSPEC_LASX_XVFCVTH))]
+    (float_extend:V4DF
+    (vec_select:V4SF
+      (match_operand:V8SF 1 "register_operand" "f")
+      (parallel [(const_int 2) (const_int 3)
+                 (const_int 6) (const_int 7)]))))]
   "ISA_HAS_LASX"
   "xvfcvth.d.s\t%u0,%u1"
   [(set_attr "type" "simd_fcvt")
-   (set_attr "mode" "V4DF")])
+   (set_attr "mode" "V4DF")
+   (set_attr "length" "12")])
 
 ;; Define for gen insn.
 (define_insn "lasx_xvfcvth_d_insn"
@@ -2730,12 +2738,16 @@
 ;; Define for builtin function.
 (define_insn "lasx_xvfcvtl_d_s"
   [(set (match_operand:V4DF 0 "register_operand" "=f")
-	(unspec:V4DF [(match_operand:V8SF 1 "register_operand" "f")]
-		     UNSPEC_LASX_XVFCVTL))]
+    (float_extend:V4DF
+    (vec_select:V4SF
+      (match_operand:V8SF 1 "register_operand" "f")
+      (parallel [(const_int 0) (const_int 1)
+                 (const_int 4) (const_int 5)]))))]
   "ISA_HAS_LASX"
   "xvfcvtl.d.s\t%u0,%u1"
   [(set_attr "type" "simd_fcvt")
-   (set_attr "mode" "V4DF")])
+   (set_attr "mode" "V4DF")
+   (set_attr "length" "8")])
 
 ;; Define for gen insn.
 (define_insn "lasx_xvfcvtl_d_insn"
@@ -5189,20 +5201,3 @@
         const0_rtx));
   DONE;
 })
-
-;; merge vec_unpacks_hi_v8sf/vec_unpacks_lo_v8sf
-(define_peephole
-  [(set (match_operand:V4DF 0 "register_operand")
-    (float_extend:V4DF (vec_select:V4SF
-                 (match_operand:V8SF 1 "register_operand")
-                 (parallel [(const_int 0) (const_int 1)
-                            (const_int 2) (const_int 3)]))))
-   (set (match_operand:V4DF 2 "register_operand")
-    (float_extend:V4DF (vec_select:V4SF
-                 (match_operand:V8SF 3 "register_operand")
-                 (parallel [(const_int 4) (const_int 5)
-                            (const_int 6) (const_int 7)]))))]
-  "ISA_HAS_LASX && rtx_equal_p (operands[1], operands[3])"
-{
-  return "xvpermi.d\t%u2,%u1,0xd8\n\txvfcvtl.d.s\t%u0,%u2\n\txvfcvth.d.s\t%u2,%u2";
-})
diff --git a/src/gcc/config/loongarch/loongarch-protos.h b/src/gcc/config/loongarch/loongarch-protos.h
index 08a9e8dc2..2fb1d1c30 100644
--- a/src/gcc/config/loongarch/loongarch-protos.h
+++ b/src/gcc/config/loongarch/loongarch-protos.h
@@ -115,7 +115,6 @@ extern bool loongarch_const_vector_same_int_p (rtx, machine_mode, HOST_WIDE_INT,
 extern bool loongarch_const_vector_shuffle_set_p (rtx, machine_mode);
 extern bool loongarch_const_vector_bitimm_set_p (rtx, machine_mode);
 extern bool loongarch_const_vector_bitimm_clr_p (rtx, machine_mode);
-extern rtx loongarch_lsx_vec_parallel_const_half (machine_mode, bool);
 extern rtx loongarch_gen_const_int_vector (machine_mode, HOST_WIDE_INT);
 extern enum reg_class loongarch_secondary_reload_class (enum reg_class,
 							machine_mode,
@@ -166,6 +165,7 @@ extern void loongarch_expand_atomic_qihi (union loongarch_gen_fn_ptrs,
 extern void loongarch_expand_vector_group_init (rtx, rtx);
 extern void loongarch_expand_vector_init (rtx, rtx);
 extern void loongarch_expand_vec_unpack (rtx op[2], bool, bool);
+extern void loongarch_expand_fp_vec_unpack (rtx op[2], bool);
 extern void loongarch_expand_vec_perm (rtx, rtx, rtx, rtx);
 extern void loongarch_expand_vec_perm_1 (rtx[]);
 extern void loongarch_expand_vector_extract (rtx, rtx, int);
diff --git a/src/gcc/config/loongarch/loongarch.c b/src/gcc/config/loongarch/loongarch.c
index 176b7933a..f69c87277 100644
--- a/src/gcc/config/loongarch/loongarch.c
+++ b/src/gcc/config/loongarch/loongarch.c
@@ -9533,6 +9533,21 @@ loongarch_expand_vector_reduc (rtx (*fn) (rtx, rtx, rtx), rtx dest, rtx in)
     }
 }
 
+/* Expand a float vector unpack operation.  */
+
+void
+loongarch_expand_fp_vec_unpack(rtx operands[2], bool high_p)
+{
+  rtx tmp = gen_reg_rtx (V8SFmode);
+
+  /* { 0 1 2 3 4 5 6 7 } -> { 0 1 4 5 2 3 6 7 } */
+  emit_insn (gen_lasx_xvpermi_d_v8sf (tmp, operands[1], GEN_INT (0xd8)));
+  if (high_p)
+    emit_insn (gen_lasx_xvfcvth_d_s(operands[0], tmp));
+  else
+    emit_insn (gen_lasx_xvfcvtl_d_s(operands[0], tmp));
+}
+
 /* Expand an integral vector unpack operation.  */
 
 void
@@ -9647,25 +9662,6 @@ loongarch_expand_vec_unpack (rtx operands[2], bool unsigned_p, bool high_p)
   gcc_unreachable ();
 }
 
-/* Construct and return PARALLEL RTX with CONST_INTs for HIGH (high_p == TRUE)
-   or LOW (high_p == FALSE) half of a vector for mode MODE.  */
-
-rtx
-loongarch_lsx_vec_parallel_const_half (machine_mode mode, bool high_p)
-{
-  int nunits = GET_MODE_NUNITS (mode);
-  rtvec v = rtvec_alloc (nunits / 2);
-  int base;
-  int i;
-
-  base = high_p ? nunits / 2 : 0;
-
-  for (i = 0; i < nunits / 2; i++)
-    RTVEC_ELT (v, i) = GEN_INT (base + i);
-
-  return gen_rtx_PARALLEL (VOIDmode, v);
-}
-
 /* A subroutine of loongarch_expand_vec_init, match constant vector elements.  */
 
 static inline bool
diff --git a/src/gcc/config/loongarch/lsx.md b/src/gcc/config/loongarch/lsx.md
index 2b1d6f109..69d12fd55 100644
--- a/src/gcc/config/loongarch/lsx.md
+++ b/src/gcc/config/loongarch/lsx.md
@@ -388,27 +388,21 @@
   [(set_attr "type" "simd_permute")
    (set_attr "mode" "<MODE>")])
 
-(define_expand "vec_unpacks_hi_v4sf"
+(define_expand "vec_unpacks_lo_v4sf"
   [(set (match_operand:V2DF 0 "register_operand" "=f")
-	(float_extend:V2DF
-	  (vec_select:V2SF
-	    (match_operand:V4SF 1 "register_operand" "f")
-	    (match_dup 2))))]
-  "ISA_HAS_LSX"
-{
-  operands[2] = loongarch_lsx_vec_parallel_const_half (V4SFmode, true/*high_p*/);
-})
+    (float_extend:V2DF
+      (vec_select:V2SF
+        (match_operand:V4SF 1 "register_operand" "f")
+        (parallel [(const_int 0) (const_int 1)]))))]
+  "ISA_HAS_LSX")
 
-(define_expand "vec_unpacks_lo_v4sf"
+(define_expand "vec_unpacks_hi_v4sf"
   [(set (match_operand:V2DF 0 "register_operand" "=f")
-	(float_extend:V2DF
-	  (vec_select:V2SF
-	    (match_operand:V4SF 1 "register_operand" "f")
-	    (match_dup 2))))]
-  "ISA_HAS_LSX"
-{
-  operands[2] = loongarch_lsx_vec_parallel_const_half (V4SFmode, false/*high_p*/);
-})
+    (float_extend:V2DF
+      (vec_select:V2SF
+        (match_operand:V4SF 1 "register_operand" "f")
+        (parallel [(const_int 2) (const_int 3)]))))]
+  "ISA_HAS_LSX")
 
 (define_expand "vec_unpacks_hi_<mode>"
   [(match_operand:<VDMODE> 0 "register_operand")
diff --git a/src/gcc/testsuite/gcc.target/loongarch/vec-unpack.c b/src/gcc/testsuite/gcc.target/loongarch/vec-unpack.c
new file mode 100644
index 000000000..a7fa86519
--- /dev/null
+++ b/src/gcc/testsuite/gcc.target/loongarch/vec-unpack.c
@@ -0,0 +1,18 @@
+/* { dg-do compile } */
+/* { dg-options "-O3 -mlasx" } */
+/* { dg-final { scan-assembler-times "xvpermi.d" 2} } */
+/* { dg-final { scan-assembler-times "xvfcvtl.d.s" 2} } */
+/* { dg-final { scan-assembler-times "xvfcvth.d.s" 2} } */
+
+#define N 16                                              
+float f[N];
+double d[N];
+int n[N];
+
+__attribute__((noinline)) void
+foo (void)
+{
+  int i;
+  for (i = 0; i < N; i++)
+    d[i] = f[i];
+}
-- 
2.31.1

